package chav1961.bt.neuralnetwork.rnn;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.function.DoubleSupplier;

import chav1961.bt.neuralnetwork.math.NNMath;
import chav1961.bt.neuralnetwork.math.NNMath.RandomType;
import chav1961.purelib.basic.exceptions.PrintingException;
import chav1961.purelib.basic.exceptions.SyntaxException;
import chav1961.purelib.basic.growablearrays.GrowableFloatArray;
import chav1961.purelib.json.interfaces.JsonSerializable;
import chav1961.purelib.matrix.interfaces.FloatMatrix;
import chav1961.purelib.matrix.interfaces.MatrixFactory;
import chav1961.purelib.streams.JsonStaxParser;
import chav1961.purelib.streams.JsonStaxPrinter;
import chav1961.purelib.streams.interfaces.JsonStaxParserLexType;

// https://bookflow.ru/vvedenie-v-rnn-rekurrentnye-nejronnye-seti-dlya-nachinayushhih/
// https://habr.com/ru/articles/542386/
public class SimpleRNN implements JsonSerializable<SimpleRNN> {
	private static final String	INPUT_VECTOR_SIZE = "inputVectorSize";
	private static final String	HIDDEN_VECTOR_SIZE = "hiddenVectorSize";
	private static final String	OUTPUT_VECTOR_SIZE = "outputVectorSize";
	private static final String	INPUT_HIDDEN_WEIGHT = "inputHiddenWeight";
	private static final String	HIDDEN_HIDDEN_WEIGHT = "hiddenHiddenWeight";
	private static final String	HIDDEN_OUTPUT_WEIGHT = "hiddenOutputWeight";
	private static final String	HIDDEN_DISPLACEMENT = "hiddenDisplacement";
	private static final String	OUTPUT_DISPLACEMENT = "outputDisplacement";

	private static final String			DUMP = "{\"inputVectorSize\":18,\"hiddenVectorSize\":30,\"outputVectorSize\":2,\"inputHiddenWeight\":[0.203476145863533056,0.52609264850616448,0.257855951786041344,0.4469732940196992,0.46913057565689088,0.93082147836685184,0.126045882701873792,0.697497308254241792,0.79313480854034432,0.107748545706272128,0.113169379532337152,0.297119170427322368,0.6323865652084352,0.096942506730556544,0.050226304680109056,0.872727751731872512,0.665439426898956288,0.7827184796333312,0.425254642963409408,0.782618522644043008,0.853560090065002496,0.297728866338729984,0.473108828067779584,0.062935940921306624,0.896576523780822784,0.546676754951476992,0.058482263237237888,0.37033960223197952,0.626761734485626368,0.593333840370178048,0.266999721527099648,0.93069171905517568,0.447472035884857088,0.319585800170898432,0.948306560516357376,0.559224784374237184,0.267987221479415808,0.461515605449676544,0.065433159470558208,0.4045645594596864,0.511975049972534272,0.855074822902679552,0.596315145492553728,0.187146142125129728,0.68423002958297728,0.482681870460510208,0.906200349330902016,0.351976156234741248,0.668813169002532864,0.702126145362853888,0.963776826858520576,0.73635667562484736,0.401444047689437952,0.86044412851333632,0.509205520153045504,0.0651022493839264,0.80997657775878912,0.347974747419357184,0.298844695091247616,0.828944087028503552,0.949012458324432384,0.031588852405548032,0.849304437637329152,0.876230001449585152,0.06818617135286336,0.921127259731292672,0.682569563388824576,0.35369342565536512,0.948379635810852096,0.869371175765991168,0.934282839298248192,0.468977272510528512,0.216102719306945792,0.08340702950954432,0.328881293535232512,0.91576457023620608,0.503501415252685568,0.234037846326828032,0.948129177093506048,0.70177984237670912,0.259932696819305472,0.989931404590606848,0.923693597316741888,0.550590753555297792,0.74077081680297856,0.874485194683075072,0.169760197401046784,0.010052894242107904,0.200087666511535616,0.445927053689956608,0.538288116455078144,0.893404722213745152,0.596074819564819456,0.934958696365356544,0.327353507280349696,0.703433513641357312,0.181552842259407104,0.639290273189544704,0.90213519334793088,0.245798587799072256,0.196638986468315136,0.570700347423553536,0.29844468832016,0.724509358406066944,0.506621599197387776,0.077798016369342848,0.070306509733200128,0.230723530054092288,0.435315787792205824,0.426449865102767872,0.315945029258727936,0.68544083833694464,0.23265172541141504,0.609875977039337216,0.77063643932342528,0.977335631847381504,0.58497309684753408,0.981706380844116224,0.090235382318496768,0.24888241291046144,0.327500283718109184,0.657830119132995584,0.965787947177886976,0.027094464749097856,0.050639018416404736,0.016656445339322112,0.507493436336517376,0.16960956156253824,0.605292320251464704,0.04244808852672576,0.415379971265792768,0.402519822120666624,0.60705924034118656,0.702674984931945984,0.814409792423248384,0.563257634639739904,0.915181100368499712,0.027875889092683776,0.273331612348556544,0.5300139784812928,0.719323277473449728,0.071304827928543104,0.44944974780082688,0.21857839822769152,0.305754482746124288,0.465677380561828608,0.005580197088420352,0.958154797554016256,0.794215917587280384,0.8656222820281984,0.930816531181335552,0.01962145604193216,0.137745171785354624,0.166981682181358336,0.163328886032104448,0.062866441905498496,0.459949910640716544,0.027893219143152256,0.461272358894348288,0.794245779514312704,0.367700099945068288,0.88162541389465344,0.796980500221252608,0.180873453617095936,0.221936196088790784,0.327427804470062336,0.159974098205566464,0.155368223786354176,0.475265651941299456,0.513195693492889344,0.545913636684417792,0.862845301628112896,0.092248104512691456,0.88253861665725696,0.081478759646415744,0.151355192065238912,0.756744801998138368,0.448880493640899584,0.689256906509399552,0.187636673450469888,0.040435619652271232,0.580509364604950016,0.432076156139373824,0.791963458061218304,0.957582533359527424,0.133032038807868928,0.692818820476531968,0.329030424356460544,0.363345921039581184,0.649479985237121536,0.64360404014587392,0.766236662864685056,0.46643570065498368,0.263350069522857728,0.037327781319618176,0.81638920307159424,0.321606636047363328,0.88615441322326656,0.214902758598327552,0.918763458728790272,0.54348349571228032,0.238591000437736448,0.363139778375625728,0.180621802806854144,0.640427827835083008,0.293237596750259456,0.4810651540756224,0.300704210996627712,0.30563527345657344,0.736708998680114688,0.216569915413856512,0.926871240139007488,0.722379148006439168,0.130507558584213248,0.720638096332550144,0.8619912266731264,0.441291064023971584,0.552335739135742208,0.933003008365630976,0.02532945200800896,0.669798314571380736,0.633428931236267008,0.26093190908432,0.101110160350799616,0.877311944961547776,0.07250452786684032,0.441940933465957632,0.361586570739746048,0.4644873142242432,0.903214454650878976,0.49159419536590592,0.238868251442909184,0.870855927467346176,0.0195252932608128,0.029141806066036224,0.83791941404342656,0.902352094650268672,0.722240328788757504,0.946603775024414208,0.732555091381072896,0.248736217617988608,0.339917033910751232,0.34100782871246336,0.066926755011081728,0.130642801523208576,0.298721790313720832,0.864841282367706112,0.196903303265571584,0.766956865787506176,0.3683032989501952,0.166377961635589632,0.84891641139984128,0.885450065135955968,0.194555297493934592,0.889393150806427136,0.04825436323881152,0.813083887100219904,0.645177483558654976,0.780881643295288064,0.874451637268066304,0.777113974094390784,0.94023352861404416,0.815744042396545536,0.438336580991745024,0.924106299877166592,0.017443761229515136,0.88900971412658688,0.343462139368057344,0.221201956272125184,0.090738974511623424,0.549015164375305216,0.294060796499252224,0.842444717884063744,0.900640666484832768,0.449058771133422848,0.442326217889785856,0.8627116084098816,0.726323485374450688,0.6804041266441344,0.529740810394287104,0.082762762904167168,0.831752419471740672,0.916105747222900224,0.870330512523651072,0.591154992580413952,0.652078688144683776,0.342982858419418368,0.748143792152404736,0.2322380244731904,0.691515326499938816,0.688167989253997824,0.856913506984710656,0.494180560111999488,0.800204336643218944,0.25700926780700672,0.996778130531311104,0.456949055194854656,0.225124761462211584,0.790705978870391808,0.361098617315292416,0.347388833761215232,0.588880956172943104,0.124909780919551872,0.395824164152145408,0.937033891677856256,0.740249633789062656,0.08462432026863104,0.39452391862869248,0.487998127937316864,0.241652294993400576,0.786088228225708032,0.704113781452178944,0.203277125954628096,0.11125990003347392,0.532927870750427136,0.659474015235900928,0.170016840100288512,0.321224659681320192,0.791717827320098816,0.139566123485565184,0.597781240940093952,0.468573868274688768,0.311188578605651968,0.943320751190185472,0.748578131198883072,0.981588721275329536,0.30967226624488832,0.020485071465373056,0.33137881755828864,0.202031269669532672,0.796979665756225536,0.960778713226318336,0.291093528270721536,0.692370474338531328,0.519752025604248064,0.044124439358711296,0.86044168472290048,0.157198637723922688,0.723433613777160704,0.585381984710693376,0.462881684303283712,0.439317464828491264,0.909362733364105216,0.268927812576293888,0.55574309825897216,0.153512924909591552,0.032079439610242816,0.661588609218597376,0.784928321838379008,0.654826462268829184,0.129801020026206976,0.116848796606063872,0.886029839515685888,0.203169763088226304,0.210116550326347264,0.838918209075927552,0.61143398284912128,0.382418841123580928,0.323304891586303744,0.962158143520355328,0.588959455490112256,0.059662632644176512,0.147280484437942528,0.119530059397220608,0.424805432558059776,0.429070085287094272,0.081024229526519808,0.123143821954727168,0.5520600080490112,0.974879145622253568,0.797457337379455488,0.060646999627351808,0.295747369527816704,0.509299516677856512,0.442068159580230656,0.323110729455947776,0.376367598772048896,0.79366081953048704,0.180203124880790784,0.82323199510574336,0.606110215187072768,0.634926378726959104,0.593785166740417536,0.937085568904876544,0.84539872407913216,0.76473212242126464,0.507323741912841728,0.508323371410369792,0.382150739431381248,0.254398941993713408,0.183432474732399104,0.590633630752563456,0.772113204002380288,0.696906030178070016,0.469672620296478208,0.47243472933769216,0.835861444473266688,0.895602285861968896,0.40139076113700864,0.927194118499756032,0.946524024009704448,0.339470893144607488,0.969321966171264512,0.5634265542030336,0.962025105953216512,0.31605178117752064,0.246080741286277632,0.61033892631530752,0.15661035478115072,0.11566650122404096,0.832263350486755328,0.468254685401916416,0.288650304079055872,0.414377480745315584,0.630737245082855168,0.877362847328185856,0.505190432071685632,0.588154196739196928,0.286794573068618752,0.614003002643585024,0.12844537198543552,0.40700682997703552,0.242197960615158016,0.210609868168830976,0.495409637689590528,0.28538805246353152,0.24274913966655744,0.313605666160583424,0.928985118865966848,0.023951079696416896,0.311862111091613696,0.942943215370178048,0.607500851154327552,0.767793357372283904,0.65672355890274048,0.09766574949026112,0.569228589534759424,0.72760194540023808,0.708976149559021056,0.863764166831970304,0.33947303891181952,0.062658116221427968,0.518460214138031104,0.423776239156722944,0.700042665004730368,0.208445027470588672,0.01640230417251584,0.141986578702926592,0.9343841075897216,0.846644580364227328,0.243540450930595328,0.2047497481107712,0.476388245820999168,0.66159552335739136,0.499025940895080448,0.132373571395874048,0.266854703426361088,0.00482622813433408,0.507545828819274752,0.847163259983062784,0.278825640678405632,0.5980634093284608,0.124958872795105024,0.881641685962676992,0.611478924751281664,0.445157319307327232,0.8068420886993408,0.741623818874359296,0.271994709968566784,0.194653689861297664,0.049693934619426688,0.400739818811416576,0.265788197517394944,0.297280520200729344,0.281143665313720832,0.396161973476409856,0.897726476192474368,0.436408132314681856,0.223367586731910656,0.019708631560206464,0.250424563884734976,0.874579191207885824,0.58301335573196416,0.654158592224121088,0.650442302227020288,0.555494606494903552,0.031286753714084608,0.391526579856872448,0.559179902076721152,0.028380651026964224,0.829455256462097152,0.688211977481842176,0.732497036457061888,0.520450890064239616,0.127875968813896192,0.961349248886108416,0.681556880474090496,0.773216664791107072,0.920755386352539136,0.711350739002227712,0.4371221959590912,0.579688131809234432,0.874201178550720256,0.96754783391952512,0.370508521795272704,0.31204691529273984,0.761727571487426816,0.596999645233154304,0.356625229120254464,0.113161288201808896,0.0392265692353248,0.290953338146209792,0.878011524677276672,0.840352594852447488,0.170520395040512,0.849103569984436224,0.763501882553100544,0.296112149953842176,0.674960434436797952,0.718712449073791488,0.131131231784820608,0.75800555944442752,0.510141015052795392,0.613816857337951744,0.762117087841033984,0.328791320323943936,0.325646489858627328,0.439161568880081152,0.571232736110687232,0.167819589376449536,0.327853024005890048,0.674163639545440768,0.058610845357179648,0.236065417528152576,0.981156885623931904,0.834125041961669888,0.628995656967163136,0.789690375328064,0.537603676319122432,0.619075775146484224],\"hiddenHiddenWeight\":[0.446685820817947392,0.490815967321395968,0.434743106365203968,0.885044217109680128,0.057888582348823552,0.669229686260223488,0.930637419223785472,0.628214061260223488,0.356932133436203008,0.96503591537475584,0.955300927162170368,0.7593429684638976,0.598758399486541824,0.309800744056701696,0.049451589584350592,0.563980102539062528,0.0673464760184288,0.9625301957130432,0.434305995702743552,0.393436551094055168,0.698192715644836352,0.106860466301441152,0.710250794887542784,0.312123537063598592,0.422700732946395904,0.33712637424468992,0.417575955390930176,0.138789743185043328,0.253309577703475968,0.213515445590019328,0.709055721759796224,0.562352359294891264,0.160417452454566912,0.950302124023437312,0.682015359401702912,0.787430286407470592,0.605632126331329536,0.216197147965431296,0.496623367071151616,0.470351785421371392,0.190607711672782848,0.972135186195373568,0.267499953508377088,0.543324589729309184,0.256703794002532864,0.249363288283347968,0.857334494590759424,0.892617702484130816,0.427927792072296192,0.779482364654541056,0.124056339263916032,0.756021142005920256,0.028100801631808256,0.428131192922592256,0.877204358577728256,0.135511681437492352,0.022911014035344128,0.455294042825698816,0.784493088722228992,0.482968270778656,0.638497292995452928,0.72774958610534656,0.736173510551452672,0.409943491220474368,0.09043092280626304,0.142969802021980288,0.722639977931976192,0.19691285490989696,0.920440554618835456,0.688814997673034752,0.109834343194961536,0.433086901903152384,0.282952100038528512,0.759661972522735616,0.307351380586624,0.20478522777557376,0.149491444230079616,0.577139079570770432,0.215750396251678464,0.868535816669464064,0.806224703788757504,0.822433412075042816,0.512429952621459968,0.594477593898773248,0.208387181162834176,0.877172887325286912,0.7895236611366272,0.546306431293487616,0.72507917881011968,0.391175121068954624,0.792627096176147456,0.775921702384948736,0.558882176876068096,0.247894957661628672,0.525767028331756544,0.654091715812683264,0.656977474689483776,0.382190644741058304,0.785876095294952448,0.932871997356414976,0.243923395872116224,0.320068359375000064,0.769137501716613632,0.3411748707294464,0.200976490974426368,0.756353139877319168,0.751914918422699008,0.951800644397735424,0.392816245555877632,0.963774323463439872,0.490587025880813568,0.426407635211944448,0.699760794639587328,0.335741519927978496,0.907453775405883904,0.644310355186462464,0.952037811279297024,0.905127465724944896,0.833986639976501504,0.15165947377681728,0.182400003075599616,0.252661705017089792,0.068044774234294912,0.32947218418121344,0.614352941513061376,0.821079671382904064,0.768280327320098816,0.172144711017608704,0.585487961769103872,0.284959554672241152,0.256809502840041984,0.092493139207363072,0.168890193104743936,0.291218698024749824,0.63032513856887808,0.225032925605773824,0.600319087505340416,0.581531405448913408,0.190180480480194048,0.2861210703849792,0.744832992553711104,0.235467076301574656,0.593573391437530624,0.167749568819999744,0.743758976459503104,0.531938612461090048,0.800813257694244352,0.0911924839019776,0.671383142471313408,0.716588973999023616,0.34775355458259584,0.327372699975967488,0.500464677810669056,0.784032642841339136,0.207825064659118592,0.202729672193527296,0.92665266990661632,0.23640976846218112,0.524705886840820224,0.352531939744949248,0.634111881256103424,0.663496136665344256,0.794516444206237696,0.957993507385253888,0.39813971519470208,0.904655694961547776,0.655528962612152064,0.009216587990522368,0.015283832326531456,0.49920719861984256,0.3037320673465728,0.472897797822952192,0.4274453222751616,0.109318979084491776,0.69419378042221056,0.611898183822631936,0.563680171966552576,0.608332395553588736,0.111016646027565056,0.603192090988159232,0.36188748478889472,0.567455470561981184,0.392780959606170624,0.031374473124742528,0.15229991078376768,0.945055365562438912,0.085723102092742912,0.796818435192108032,0.085667945444583936,0.885320305824279808,0.063498325645923584,0.470741093158722048,0.571256458759307776,0.666846394538879488,0.700228095054626304,0.15384884178638464,0.753248870372772352,0.006748611573129856,0.512633919715881472,0.450896322727203328,0.898879826068878336,0.122180208563804672,0.297411888837814272,0.260409712791442944,0.197595000267028736,0.178686648607254016,0.181601747870445312,0.696986377239227392,0.877762675285339392,0.013607589527964544,0.676558852195739648,0.612999141216278016,0.735937774181366016,0.312780380249023488,0.780235707759857152,0.867196440696716288,0.14340680837631232,0.740087211132049408,0.407834202051162624,0.69960355758667008,0.345717817544937216,0.871927320957184,0.947488725185394176,0.315294653177261312,0.403125822544097792,0.172484159469604352,0.53549408912658688,0.054019879549741696,0.433362007141113344,0.660697937011718656,0.724692344665527296,0.328334093093872128,0.91286009550094592,0.36614087224006656,0.579984426498413056,0.849789857864379904,0.668550729751586816,0.1485332995653152,0.876534402370452992,0.5309203267097472,0.849560976028442368,0.964427471160888832,0.999085545539855872,0.850151896476745728,0.606632769107818496,0.20462414622306816,0.34490919113159168,0.397450000047683584,0.426800161600112896,0.297177076339721728,0.51825803518295296,0.780417621135711744,0.071842990815639552,0.37337908148765568,0.370798557996749824,0.063726484775543168,0.851259768009185792,0.42791268229484544,0.990347146987915008,0.439178973436355584,0.523979663848877056,0.069386981427669504,0.06933809816837312,0.879359781742095872,0.467760831117629952,0.65377193689346304,0.694800555706024192,0.114751912653446144,0.881197392940521216,0.320780307054519808,0.49322614073753344,0.39235585927963264,0.690485179424285952,0.212035715579986432,0.236557289958000128,0.123263299465179392,0.521572232246398976,0.939905762672424448,0.46963113546371456,0.707302749156952064,0.568047285079955968,0.197166964411735552,0.454762667417526272,0.534787237644195584,0.436094790697097728,0.25020799040794368,0.745753824710845952,0.408558428287506176,0.080073043704032896,0.942266345024109056,0.001466754009015808,0.403936594724655104,0.755747854709625344,0.748233258724212736,0.228200390934944256,0.489847898483276288,0.51294040679931648,0.368850141763687168,0.500461518764495872,0.071316964924335488,0.125325039029121408,0.32965880632400512,0.35132303833961472,0.98167490959167488,0.512339472770691072,0.058857697993516928,0.446413546800613376,0.352247983217239296,0.646645784378051584,0.958254277706146304,0.859683930873870848,0.217955261468887296,0.660307347774505472,0.052793666720390272,0.254448473453521664,0.67915946245193472,0.36382421851158144,0.906681835651397632,0.539799094200134144,0.933276832103729152,0.674394428730011136,0.62791198492050176,0.120343357324600192,0.514067888259887616,0.513247191905975296,0.94804030656814592,0.686318159103393536,0.63219416141510016,0.57661843299865728,0.56034761667251584,0.601482927799224832,0.597539842128753664,0.010917950421571712,0.127061188220977792,0.337796688079834112,0.921962380409240576,0.42986187338829056,0.625102221965789696,0.078736744821071616,0.85054832696914688,0.899822056293487616,0.989860534667968768,0.567216515541076736,0.750117421150207488,0.489370197057723904,0.337790071964263936,0.509412467479705856,0.9956285953521728,0.729971110820770304,0.401155412197113088,0.362411528825759744,0.738309025764465152,0.86700576543808,0.19205060601234432,0.13144235312938688,0.213739305734634496,0.09378160536289216,0.327849060297012224,0.881554007530212352,0.05379193276166912,0.055914770811796224,0.896533429622650112,0.028959052637219456,0.403235882520675584,0.78944373130798336,0.217892646789550848,0.118858344852924416,0.509982287883758592,0.913262784481048576,0.365362852811813376,0.7194163799285888,0.857361495494842368,0.334937721490860032,0.853328466415405312,0.265658497810363904,0.83748525381088256,0.948695480823516672,0.465986996889114368,0.172412037849426176,0.426662594079971328,0.805353164672851456,0.806422293186187776,0.302015006542205952,0.317000180482864384,0.016180852428078592,0.778318941593170176,0.920368313789367808,0.482735127210617088,0.21616785228252416,0.877789497375488256,0.604008078575134208,0.215508893132209664,0.756888687610626048,0.869075477123260416,0.171226665377616896,0.249707281589508096,0.925142407417297408,0.14542286098003392,0.601872980594635008,0.717154741287231488,0.390764236450195456,0.835219860076904448,0.083312995731830528,0.319865465164184576,0.77548670768737792,0.503526926040649472,0.774134278297424384,0.2902172803878784,0.704451858997345024,0.120414547622203776,0.6125293970108032,0.419829607009887744,0.952954828739166208,0.82006609439849856,0.512894093990326016,0.681589424610138112,0.333224743604659968,0.858390986919403008,0.592028856277465856,0.743683993816375808,0.779524147510528512,0.091932088136673024,0.645432353019714304,0.980163514614105088,0.684577882289886464,0.247141644358635008,0.954529225826263552,0.419469833374023424,0.916315257549285888,0.226637423038482688,0.64727342128753664,0.440532356500625664,0.101139076054096256,0.707841396331787264,0.257422357797622784,0.925446152687072768,0.698409020900726272,0.329441070556640768,0.831876993179321344,0.008411062881350528,0.110555775463581056,0.83240383863449088,0.920835256576538112,0.52252471446990976,0.574216723442077696,0.624812364578247168,0.052108313888311424,0.73918676376342784,0.860012710094451968,0.373579531908035328,0.838798820972442624,0.0192854963243008,0.872059643268585216,0.391139596700668416,0.69864469766616832,0.551001727581024256,0.083037480711936896,0.78150153160095232,0.27368080615997312,0.435979425907134976,0.366614282131195136,0.537589550018310656,0.030474167317152,0.003776648780331008,0.196249768137931776,0.040585238486528384,0.194039404392242432,0.383923590183258112,0.367880046367645184,0.702023983001709056,0.122642576694488576,0.045579940080642688,0.373710870742797824,0.810688436031341568,0.466053217649459712,0.226696193218231296,0.305324375629425152,0.998879790306091264,0.96640586853027328,0.917749524116516096,0.696529328823089664,0.126437783241271936,0.558684349060058624,0.339536786079406592,0.029863081872463232,0.795918405055999744,0.50694286823272704,0.66017329692840576,0.725379228591919104,0.158628046512603648,0.67273044586181632,0.033358570188283904,0.306330919265746944,0.148751467466354432,0.653785765171051008,0.908134818077087232,0.093587666749954176,0.791600406169891328,0.453922390937805312,0.959778606891632128,0.219099313020706304,0.77204829454422016,0.549124062061309952,0.922129392623901184,0.968446791172027648,0.020505964756011904,0.700223565101623552,0.063572429120540672,0.463497370481490944,0.676332056522369536,0.629137992858886656,0.042058881372213376,0.478407382965087744,0.422360867261886464,0.723486781120300288,0.398959040641784576,0.745692253112793088,0.849270164966583296,0.263518422842025728,0.007208712399005952,0.45381045341491712,0.204798936843872,0.275625765323638784,0.376123011112212992,0.763685226440429568,0.610366046428680448,0.008328727446496512,0.833416163921356288,0.078811980783939328,0.58642852306365952,0.199456930160522496,0.254379421472549376,0.492079883813858048,0.51795756816864,0.75736528635025024,0.18883389234542848,0.302158236503601152,0.512699663639068672,0.214367464184761088,0.948388218879699712,0.74327850341796864,0.957429170608520448,0.327172964811324928,0.459696501493453824,0.10446727275848384,0.96118742227554304,0.496966928243636992,0.463824152946472192,0.227762654423713792,0.789543390274048,0.260871112346649088,0.947495400905609216,0.969673156738281216,0.340198367834091264,0.966877520084381184,0.52890831232070912,0.586114883422851584,0.687798500061035008,0.885947525501251072,0.888968825340271104,0.15828885138034816,0.734605729579925504,0.437819987535476736,0.23820815980434432,0.115437231957912448,0.043718136847019136,0.9111753106117248,0.240313068032264704,0.630144238471984896,0.002820027526468096,0.044151090085506432,0.775111496448516864,0.162822753190994176,0.568979263305664,0.097810044884681728,0.417021006345748992,0.714255750179290624,0.97880125045776384,0.60300910472869888,0.529381096363067648,0.40853697061538688,0.973284959793090816,0.790222644805908224,0.430754393339156992,0.873483061790466304,0.283018440008163328,0.822223305702209536,0.176196306943893504,0.511564552783966208,0.346887707710266112,0.34112471342086784,0.11465612798929216,0.161630406975746048,0.496263712644577024,0.51414412260055552,0.533087432384491008,0.840178310871124224,0.126670375466346752,0.71654206514358528,0.378508597612380928,0.220647066831588864,0.700226187705993728,0.225549548864364544,0.261169701814651392,0.260186433792114176,0.774690032005309952,0.815693676471710208,0.685144662857055744,0.915585041046142464,0.638732612133026304,0.943784952163696128,0.727082788944244224,0.203513771295547392,0.548091709613799936,0.290930986404419072,0.189517125487327488,0.95496875047683712,0.003560819895938048,0.789291739463806208,0.592041790485382144,0.489774376153945856,0.989297986030578688,0.902895092964172288,0.231833294034004224,0.094233907759189632,0.598731815814971904,0.85468125343322752,0.944406867027282688,0.62349075078964224,0.015380460768938112,0.696046829223632896,0.126160591840744064,0.769891321659088128,0.387187629938125568,0.600510954856872448,0.042176552116870912,0.539616107940673792,0.735520184040069632,0.529727399349212672,0.435909777879714816,0.262072116136550912,0.673760175704955904,0.46791788935661312,0.981812238693237248,0.020016834139823872,0.37546205520629888,0.749904155731201024,0.17760166525840768,0.733110547065734912,0.928338229656219648,0.618266522884368896,0.859799027442932224,0.25356963276863104,0.937870442867279104,0.036759596318006528,0.644323945045471232,0.739820659160613888,0.003138317959383168,0.959967076778412032,0.243349730968475392,0.262531578540802048,0.477491885423660288,0.713278114795684864,0.790284276008605952,0.067122921347618048,0.747985720634460416,0.872620701789856,0.01665849238634112,0.167837828397750784,0.120031267404556288,0.049988076090812672,0.367865383625030656,0.980677485466003456,0.277512133121490432,0.288646787405014016,0.91910958290100096,0.515984058380126976,0.203647449612617472,0.351014524698257408,0.258589386940002304,0.246179848909378048,0.39417603611946112,0.042550496757030528,0.34184825420379648,0.140149414539337216,0.171974778175354112,0.856599509716034048,0.689396739006042624,0.512975215911865344,0.921011984348297216,0.647984921932220416,0.19911949336528768,0.27821680903434752,0.09757693111896512,0.747245669364929024,0.275646477937698304,0.909648358821869056,0.948015332221984768,0.91276514530181888,0.940781295299529984,0.920346021652221696,0.964738965034484736,0.78463995456695552,0.082243852317333248,0.949244499206542848,0.246068269014358528,0.051990304142236672,0.0223983004689216,0.608756482601165824,0.09050392359495168,0.374512791633605888,0.144301697611808768,0.0917779132723808,0.352313846349716224,0.209429785609245184,0.399322420358657792,0.162375777959823616,0.312860667705536,0.086590372025966592,0.138741761445999104,0.561684310436248832,0.080883666872978176,0.547329664230346752,0.861166357994079744,0.049010038375854464,0.824988365173339904,0.916794598102569472,0.148242145776748672,0.267873525619506944,0.462886124849319424,0.314795970916748032,0.273076564073562624,0.377692729234695424,0.784464776515960832,0.82684844732284544,0.70893722772598272,0.924038112163543552,0.369561046361923072,0.554910838603973376,0.040211848914623232,0.733867645263671808,0.076343864202499328,0.346442043781280512,0.583276331424713216,0.716875135898590208,0.32250705361366272,0.360737740993499648,0.361833482980728064,0.330062925815582208,0.859009444713592576,0.273116230964660736,0.949447274208068864,0.119876153767108864,0.244888007640838656,0.84037220478057856,0.091413713991641984,0.194711729884147712,0.771710991859436032,0.75501942634582528,0.948771059513092096,0.7003430128097536,0.157524570822715648,0.2011943012475968,0.269168406724929792,0.371776491403579648,0.932687699794769408,0.291694581508636416,0.78247410058975232,0.017284315079450624,0.073777481913566592,0.613478600978851328,0.643420338630676224,0.353832274675369216,0.106787286698818176,0.438051760196685824,0.799244165420532224,0.957849919795990016,0.597128391265869312,0.763518989086151168,0.747199237346649088,0.221266105771064832,0.671485483646392832,0.246683493256568832,0.264976203441619968,0.10995911806821824,0.975364744663238656,0.256423175334930432,0.346484959125518848,0.210248246788978688,0.260213047266006528,0.733678221702575616,0.756114244461059584,0.018778959289193216,0.615275084972381696,0.278734385967254528,0.326499879360198912,0.682131588459014912,0.211895570158958336,0.903088808059692544,0.367995858192443904,0.424708873033523712,0.311760574579238912,0.181035697460174592,0.332456976175308288,0.716935515403747584,0.205613613128662016,0.115212015807628672,0.179605588316917504,0.830527961254119936,0.695269465446472192,0.89069366455078144,0.73116970062255872,0.80357080698013312,0.709288060665130496,0.833835184574127104,0.66614270210266112,0.9953611493110656,0.651460528373718272,0.314897119998931968,0.709929823875427328,0.349460840225219584,0.121297933161258752,0.037606500089168512,0.000810561527032448,0.20312026143074048,0.717001855373382656,0.144148081541061376,0.579059600830077952,0.982216894626617344,0.733936786651611392,0.830685198307037184,0.437233507633209344,0.403076589107513344,0.70541089773178112,0.716360151767730688,0.594544708728790272,0.86602210998535168,0.897613167762756352,0.037827402353286784,0.213907122611999488,0.570221185684204032,0.066842325031757312,0.8517212271690368,0.867153763771057152,0.505381703376770048,0.014702500775456384,0.819064855575561472,0.672088623046875136,0.883068680763244544,0.735730290412902912,0.818476557731628544,0.174451008439064064,0.75889486074447616,0.24195577204227456,0.589131474494934016,0.528533399105072128,0.566561520099639808,0.470190286636352512,0.839788675308227584,0.742108345031738368,0.035705223679542528,0.03037172555923456,0.77679532766342144,0.494484066963195904,0.497730255126953216,0.937088131904602112,0.801830053329467904,0.310922682285308928,0.897285223007202304,0.881438672542572032,0.209251195192336896,0.682318031787872256,0.921766698360443136,0.046681128442287488,0.0732647851109504,0.055945686995983104,0.537211775779724032,0.94865220785140992,0.15673074126243584,0.491260319948196352,0.876165688037872128,0.290738821029663232,0.596276044845581056,0.174130871891975424,0.861588716506957824,0.363214880228042752,0.322485953569412096,0.913567066192626944,0.170592308044433664,0.088048577308654848,0.65929502248764032,0.206905514001846272,0.142772063612937984,0.412824511528015104,0.313302546739578368,0.452587187290191616,0.020129831507801984,0.39121267199516288,0.011587437242269568,0.414072960615158016],\"hiddenOutputWeight\":[0.469055652618408192,0.952456951141357568,0.375699311494827264,0.09410688281059264,0.679566085338592512,0.058643557131290368,0.229854956269264128,0.765451729297637888,0.462971508502960128,0.676049888134002688,0.432969808578491136,0.022384943440556544,0.676372826099395584,0.745662569999694848,0.497006326913833472,0.366657763719558656,0.990862786769866752,0.12799334526062016,0.70822256803512576,0.022283501923084288,0.490035891532897792,0.318609297275543296,0.20325550436973568,0.385435879230499328,0.83638495206832896,0.583334326744079616,0.468575984239578112,0.758901715278625536,0.775391340255737344,0.045867275446653312,0.029702598229050624,0.794946908950805504,0.56059092283248896,0.1756003350019456,0.675664544105529856,0.376118034124374528,0.477624237537383936,0.069712482392787968,0.424554079771041792,0.500416696071624704,0.021257614716887424,0.901149153709411584,0.57761180400848384,0.105447195470333056,0.436586290597915648,0.912890851497650176,0.632138192653656064,0.665552735328674304,0.274108946323394816,0.378950715065002496,0.527627646923065344,0.826618611812591616,0.328088670969009408,0.023830972611904128,0.684872329235076864,0.305135905742645248,0.828592240810394112,0.494707286357879552,0.564384520053863424,0.771282315254211584],\"hiddenDisplacement\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"outputDisplacement\":[0,0]}";
	private static final MatrixFactory	mf = MatrixFactory.Factory.newInstance(URI.create("matrix:ordinal:/"));

	private int				inputVectorSize = 0;
	private int				hiddenVectorSize = 0;
	private int				outputVectorSize = 0;
    private FloatMatrix		inputHiddenWeight = null;
    private FloatMatrix		hiddenHiddenWeight = null;
    private FloatMatrix		hiddenOutputWeight = null;
    private FloatMatrix		hiddenDisplacement = null;
    private FloatMatrix 	outputDisplacement = null;
    private FloatMatrix[]	hiddens;
    private boolean	prepared = false;
    
	public SimpleRNN() {
		
	}

	@Override
	public void fromJson(final JsonStaxParser parser) throws SyntaxException, IOException {
		if (parser == null) {
			throw new NullPointerException("Parser can't be null"); 
		}
		else {
			final GrowableFloatArray	gfa = new GrowableFloatArray(false);
			String 						name = "";
			int 						forInputVectorSize = 0, forHiddenVectorSize = 0, forOutputVectorSize = 0;
			float[]						forInputHiddenWeight = null, forHiddenHiddenWeight = null, forHiddenOutputWeight = null;   
			float[]						forHiddenDisplacement = null, forOutputDisplacement = null;   
			int 						depth = 0;
			
			for (JsonStaxParserLexType type : parser) {
				switch (type) {
					case INTEGER_VALUE	:
						if (depth == 1) {
							switch (name) {
								case INPUT_VECTOR_SIZE	:
									forInputVectorSize = (int)parser.intValue();
									break;
								case HIDDEN_VECTOR_SIZE	:
									forHiddenVectorSize = (int)parser.intValue();
									break;
								case OUTPUT_VECTOR_SIZE	:
									forOutputVectorSize = (int)parser.intValue();
									break;
								default :
									throw new SyntaxException(parser.row(), parser.col(), "Unsupported field name"); 
							}
						}
						else if (depth == 2) {
							gfa.append(parser.intValue());
						}
						break;
					case LIST_SPLITTER	:
						if (depth != 1 && depth != 2) {
							throw new SyntaxException(parser.row(), parser.col(), "Illegal lexema in the input source"); 
						}
						break;
					case NAME			:
						if (depth == 1) {
							name = parser.name();
						}
						else {
							throw new SyntaxException(parser.row(), parser.col(), "Illegal name in the input"); 
						}
						break;
					case NAME_SPLITTER	:
						if (depth != 1) {
							throw new SyntaxException(parser.row(), parser.col(), "Illegal lexema in the input source"); 
						}
						break;
					case REAL_VALUE		:
						if (depth == 2) {
							gfa.append((float)parser.realValue());
						}
						else {
							throw new SyntaxException(parser.row(), parser.col(), "Illegal name in the input"); 
						}
						break;
					case START_ARRAY	:
						if (depth == 1) {
							depth = 2;
						}
						else {
							throw new SyntaxException(parser.row(), parser.col(), "Illegal lexema in the input source"); 
						}
						break;
					case END_ARRAY		:
						if (depth == 2) {
							depth = 1;
							switch (name) {
								case INPUT_HIDDEN_WEIGHT 	:
									forInputHiddenWeight = gfa.extract();
									break;
								case HIDDEN_HIDDEN_WEIGHT 	:
									forHiddenHiddenWeight = gfa.extract();
									break;
								case HIDDEN_OUTPUT_WEIGHT 	:
									forHiddenOutputWeight = gfa.extract();
									break;
								case HIDDEN_DISPLACEMENT 	:
									forHiddenDisplacement = gfa.extract();
									break;
								case OUTPUT_DISPLACEMENT 	:
									forOutputDisplacement = gfa.extract();
									break;
								default :
									throw new SyntaxException(parser.row(), parser.col(), "Unsupported field name"); 
							}
							gfa.clear();
						}
						else {
							throw new SyntaxException(parser.row(), parser.col(), "Illegal lexema in the input source"); 
						}
						break;
					case START_OBJECT	:
						if (depth == 0) {
							depth = 1;
						}
						else {
							throw new SyntaxException(parser.row(), parser.col(), "Illegal lexema in the input source"); 
						}
						break;
					case END_OBJECT		:
						if (depth == 1) {
							depth = 0;
						}
						else {
							throw new SyntaxException(parser.row(), parser.col(), "Illegal lexema in the input source"); 
						}
						break;
					case ERROR : case STRING_VALUE : case NULL_VALUE : case BOOLEAN_VALUE :
					default:
						throw new SyntaxException(parser.row(), parser.col(), "Illegal lexema in the input source"); 
				}
			}
			checkValue(forInputVectorSize, INPUT_VECTOR_SIZE);
			checkValue(forHiddenVectorSize, HIDDEN_VECTOR_SIZE);
			checkValue(forOutputVectorSize, OUTPUT_VECTOR_SIZE);
			checkArray(forInputHiddenWeight, forInputVectorSize * forHiddenVectorSize, INPUT_HIDDEN_WEIGHT);
			checkArray(forHiddenHiddenWeight, forHiddenVectorSize * forHiddenVectorSize, HIDDEN_HIDDEN_WEIGHT);
			checkArray(forHiddenOutputWeight, forHiddenVectorSize * forOutputVectorSize, HIDDEN_OUTPUT_WEIGHT);
			checkArray(forHiddenDisplacement, forHiddenVectorSize, HIDDEN_DISPLACEMENT);
			checkArray(forOutputDisplacement, forOutputVectorSize, OUTPUT_DISPLACEMENT);
			
			this.inputVectorSize = forInputVectorSize;
			this.hiddenVectorSize = forHiddenVectorSize;
			this.outputVectorSize = forOutputVectorSize;
			this.inputHiddenWeight = (FloatMatrix) mf.newMatrix(forHiddenVectorSize, forInputVectorSize, forInputHiddenWeight);
			this.hiddenHiddenWeight = (FloatMatrix) mf.newMatrix(forHiddenVectorSize, forHiddenVectorSize, forHiddenHiddenWeight);
			this.hiddenOutputWeight = (FloatMatrix) mf.newMatrix(forOutputVectorSize, forHiddenVectorSize, forHiddenOutputWeight);
			this.hiddenDisplacement = (FloatMatrix) mf.newMatrix(forHiddenVectorSize, 1, forHiddenDisplacement);
			this.outputDisplacement = (FloatMatrix) mf.newMatrix(forOutputVectorSize, 1, forOutputDisplacement);
			this.prepared = true;
		}
	}

	@Override
	public void toJson(final JsonStaxPrinter printer) throws PrintingException, IOException {
		if (!prepared) {
			throw new IllegalStateException("Unprepared network can't be unloaded. Call pepare(...) before"); 
		}
		else if (printer == null) {
			throw new NullPointerException("Printer can't be null");
		}
		else {
			printer.startObject();
				printer.name(INPUT_VECTOR_SIZE).value(inputVectorSize).splitter();
				printer.name(HIDDEN_VECTOR_SIZE).value(hiddenVectorSize).splitter();
				printer.name(OUTPUT_VECTOR_SIZE).value(outputVectorSize).splitter();
				printer.name(INPUT_HIDDEN_WEIGHT).startArray();
					print(inputHiddenWeight, printer);
				printer.endArray().splitter();
				printer.name(HIDDEN_HIDDEN_WEIGHT).startArray();
					print(hiddenHiddenWeight, printer);
				printer.endArray().splitter();
				printer.name(HIDDEN_OUTPUT_WEIGHT).startArray();
					print(hiddenOutputWeight, printer);
				printer.endArray().splitter();
				printer.name(HIDDEN_DISPLACEMENT).startArray();
					print(hiddenDisplacement, printer);
				printer.endArray().splitter();
				printer.name(OUTPUT_DISPLACEMENT).startArray();
					print(outputDisplacement, printer);
				printer.endArray();
			printer.endObject();
			printer.flush();
		}
	}

	private void print(final FloatMatrix matrix, final JsonStaxPrinter printer) throws IOException {
		final float[]	content = new float[matrix.getSize(0)*matrix.getSize(1)];
		
		matrix.get(0, content, 0, content.length);
		for(int index = 0; index < content.length; index++) {
			if (index > 0) {
				printer.splitter();
			}
			printer.value(content[index]);
		}
	}

	public void prepare(final int inputVectorSize, final int hiddenVectorSize, final int outputVectorSize) {
		if (inputVectorSize <= 0) {
			throw new IllegalArgumentException("Input vector size must be greater than 0");
		}
		else if (hiddenVectorSize <= 0) {
			throw new IllegalArgumentException("Hidden vector size must be greater than 0");
		}
		else if (outputVectorSize <= 0) {
			throw new IllegalArgumentException("Output vector size must be greater than 0");
		}
		else {
			final DoubleSupplier func = RandomType.UNIFORM.getFunction();
			
			this.inputVectorSize = inputVectorSize;
			this.hiddenVectorSize = hiddenVectorSize;
			this.outputVectorSize = outputVectorSize;
			this.inputHiddenWeight = ((FloatMatrix) mf.newMatrix(float.class, hiddenVectorSize, inputVectorSize)).function((t)->func.getAsDouble());
			this.hiddenHiddenWeight = ((FloatMatrix) mf.newMatrix(float.class, hiddenVectorSize, hiddenVectorSize)).function((t)->func.getAsDouble());
			this.hiddenOutputWeight = ((FloatMatrix) mf.newMatrix(float.class, outputVectorSize, hiddenVectorSize)).function((t)->func.getAsDouble());
			this.hiddenDisplacement = (FloatMatrix) mf.newMatrix(float.class, hiddenVectorSize, 1);
			this.outputDisplacement = (FloatMatrix) mf.newMatrix(float.class, outputVectorSize, 1);
			
			this.prepared = true;
		}
	}
	
	public FloatMatrix forward(final FloatMatrix[] source) {
		if (!prepared) {
			throw new IllegalStateException("Netword in not prepared yet. Call prepare(...) before"); 
		}
		else if (source == null || source.length == 0) {
			throw new IllegalArgumentException("Source vector is null or empty");
		}
		else if (source[0].getSize(0) != inputVectorSize) {
			throw new IllegalArgumentException("Source vector items have size differ to awaited size ["+inputVectorSize+"]");
		}
		else {
			FloatMatrix	temp = null;
			
			hiddens = new FloatMatrix[source.length + 1];
			hiddens[0] = (FloatMatrix) mf.newMatrix(float.class, hiddenVectorSize, 1);
			
			for(int index = 0; index < source.length; index++) {
				temp = inputHiddenWeight.mul(source[index])
						.add(
								hiddenHiddenWeight.mul(hiddens[index]))
						.add(hiddenDisplacement)
						.function((t)->Math.tanh(t));
				hiddens[index + 1] = temp;
			}
			return hiddenOutputWeight.mul(temp).add(outputDisplacement);
		}
	}

	public void backPropagation(final FloatMatrix error, final FloatMatrix[] lastInputs, final float learnRate) {
		FloatMatrix inputHiddenDelta = (FloatMatrix)mf.newMatrix(float.class, hiddenVectorSize, inputVectorSize);
		FloatMatrix hiddenHiddenDelta = (FloatMatrix)mf.newMatrix(float.class, hiddenVectorSize, hiddenVectorSize);
		FloatMatrix hiddenDisplacementDelta = (FloatMatrix)mf.newMatrix(float.class, outputVectorSize, hiddenVectorSize);;

		FloatMatrix hiddenOutputDelta = error.mul(hiddens[hiddens.length-1].transp());
		FloatMatrix outputDisplacementDelta = error.add(0);
		FloatMatrix hiddenDelta = hiddenOutputWeight.transp().mul(error);
		FloatMatrix emptyInputs = (FloatMatrix)mf.newMatrix(float.class, error.getSize(0), error.getSize(1));
		
		for(int index = hiddens.length - 1; index >= 0; index--) {
			final FloatMatrix	temp = hiddens[index].function((t)->(1 - t*t)).transp().mul(hiddenDelta);

			hiddenDisplacementDelta = hiddenDisplacementDelta.add(temp.get(0,0));
			hiddenHiddenDelta = temp.mul(hiddens[index]).add(hiddenHiddenDelta);
			inputHiddenDelta = temp.mul(index > 0 ? lastInputs[index - 1] : emptyInputs).add(inputHiddenDelta);
			hiddenDelta = hiddenHiddenWeight.mul(temp);
		}
		inputHiddenDelta = inputHiddenDelta.function((t)->-learnRate*(Math.min(1, Math.max(-1, t))));
		hiddenHiddenDelta = hiddenHiddenDelta.function((t)->-learnRate*(Math.min(1, Math.max(-1, t))));
		hiddenOutputDelta = hiddenOutputDelta.function((t)->-learnRate*(Math.min(1, Math.max(-1, t))));
		hiddenDisplacementDelta = hiddenDisplacementDelta.function((t)->-learnRate*(Math.min(1, Math.max(-1, t))));
		outputDisplacementDelta = outputDisplacementDelta.function((t)->-learnRate*(Math.min(1, Math.max(-1, t))));
		
		inputHiddenWeight = inputHiddenWeight.add(inputHiddenDelta);
		hiddenHiddenWeight = hiddenHiddenWeight.add(hiddenHiddenDelta);
		hiddenOutputWeight = hiddenOutputWeight.add(hiddenOutputDelta);
		hiddenDisplacement = hiddenDisplacement.add(hiddenDisplacementDelta);
		outputDisplacement = outputDisplacement.add(outputDisplacementDelta);
	}

	private void checkValue(final int size, final String fieldName) throws SyntaxException {
		if (size <= 0) {
			throw new SyntaxException(0, 0, "Field ["+fieldName+"] is missing or has illegal value ["+size+"], must be greater than 0");
		}
	}

	private void checkArray(final float[] array, final int size, final String fieldName) throws SyntaxException {
		if (array == null) {
			throw new SyntaxException(0, 0, "Field ["+fieldName+"] is missing");
		}
		else if (array.length != size) {
			throw new SyntaxException(0, 0, "Field ["+fieldName+"] has wrong number of items ["+array.length+"], must be ["+size+"]");
		}
	}
	
	private static final Data[]	TRAINING_SET = {
									new Data("good", true),
									new Data("bad", false),
									new Data("happy", true),
									new Data("sad", false),
									new Data("not good", false),
									new Data("not bad", true),
									new Data("not happy", false),
									new Data("not sad", true),
									new Data("very good", true),
									new Data("very bad", false),
									new Data("very happy", true),
									new Data("very sad", false),
									new Data("i am happy", true),
									new Data("this is good", true),
									new Data("i am bad", false),
									new Data("this is bad", false),
									new Data("i am sad", false),
									new Data("this is sad", false),
									new Data("i am not happy", false),
									new Data("this is not good", false),
									new Data("i am not bad", true),
									new Data("this is not sad", true),
									new Data("i am very happy", true),
									new Data("this is very good", true),
									new Data("i am very bad", false),
									new Data("this is very sad", false),
									new Data("this is very happy", true),
									new Data("i am good not bad", true),
									new Data("this is good not bad", true),
									new Data("i am bad not good", false),
									new Data("i am good and happy", true),
									new Data("this is not good and not happy", false),
									new Data("i am not at all good", false),
									new Data("i am not at all bad", true),
									new Data("i am not at all happy", false),
									new Data("this is not at all sad", true),
									new Data("this is not at all happy", false),
									new Data("i am good right now", true),
									new Data("i am bad right now", false),
									new Data("this is bad right now", false),
									new Data("i am sad right now", false),
									new Data("i was good earlier", true),
									new Data("i was happy earlier", true),
									new Data("i was bad earlier", false),
									new Data("i was sad earlier", false),
									new Data("i am very bad right now", false),
									new Data("this is very good right now", true),
									new Data("this is very sad right now", false),
									new Data("this was bad earlier", false),
									new Data("this was very good earlier", true),
									new Data("this was very bad earlier", false),
									new Data("this was very happy earlier", true),
									new Data("this was very sad earlier", false),
									new Data("i was good and not bad earlier", true),
									new Data("i was not good and not happy earlier", false),
									new Data("i am not at all bad or sad right now", true),
									new Data("i am not at all good or happy right now", false),
									new Data("this was not happy and not good earlier", false)	
								};
	private static final Data[]	TEST_SET = {
									new Data("this is happy", true),
									new Data("i am good", true),
									new Data("this is not happy", false),
									new Data("i am not good", false),
									new Data("this is not bad", true),
									new Data("i am not sad", true),
									new Data("i am very good", true),
									new Data("this is very bad", false),
									new Data("i am very sad", false),
									new Data("this is bad not good", false),
									new Data("this is good and happy", true),
									new Data("i am not good and not happy", false),
									new Data("i am not at all sad", true),
									new Data("this is not at all good", false),
									new Data("this is not at all bad", true),
									new Data("this is good right now", true),
									new Data("this is sad right now", false),
									new Data("this is very bad right now", false),
									new Data("this was good earlier", true),
									new Data("i was not happy and not good earlier", false)			
								};
	
	private static final String[]	WORDS;
	
	static {
		final Set<String> temp = new HashSet<>();
		
		for(Data item : TRAINING_SET) {
			temp.addAll(Arrays.asList(item.word.split(" ")));
		}
		WORDS = temp.toArray(new String[temp.size()]);
	}
	
	public static void main(final String[] args) throws IOException, PrintingException, SyntaxException {
		final SimpleRNN	rnn = new SimpleRNN();
		
//		rnn.prepare(WORDS.length, 30, 2);
//		try(final StringWriter wr = new StringWriter();
//			final JsonStaxPrinter prn = new JsonStaxPrinter(wr)) {
//
//			rnn.toJson(prn);
//			System.err.println(wr.toString());
//		}
		
		try(final StringReader rdr = new StringReader(DUMP);
			final JsonStaxParser parser = new JsonStaxParser(rdr)) {

			rnn.fromJson(parser);
		}

		System.err.println("Training started...");
//		for(int epoch = 0; epoch < 1000; epoch++) {
			for(Data item : TRAINING_SET) {
				final FloatMatrix[] source = createInputs(item.word); 
				final FloatMatrix result = softmax(rnn.forward(source));
				
				System.err.println("Train: "+item.word+", result="+result+", awaited:"+item.marker);
				result.set(new float[] {-1}, 0, item.marker ? 1 : 0, 1);
				
				rnn.backPropagation(result, source, 2e-2f);
			}
//		}
		System.err.println("Training ended...");
		
		System.err.println("Test started...");
		for(Data item : TEST_SET) {
			final FloatMatrix[] source = createInputs(item.word); 
			final FloatMatrix result = softmax(rnn.forward(source));
			
			System.err.println("Test: "+item.word+", result="+result+", awaited:"+item.marker);
		}		
		System.err.println("Test ended...");
	}
	
	private static FloatMatrix[] createInputs(final String source) {
		final String[]		content = source.split(" ");
		final FloatMatrix[]	result = new FloatMatrix[content.length];
		
		for(int index = 0; index < result.length; index++) {
			final float[]	temp = new float[WORDS.length];
			
			temp[word2index(content[index])] = 1;
			result[index] = (FloatMatrix)mf.newMatrix(WORDS.length, 1, temp);
		}
		return result;
	}
	
	private static int word2index(final String word) {
		for(int index = 0; index < WORDS.length; index++) {
			if (WORDS[index].equals(word)) {
				return index;
			}
		}
		throw new IllegalArgumentException(); 
	}
	
	private static String index2word(final int index) {
		return WORDS[index];
	}

	public static FloatMatrix softmax(final FloatMatrix source) {
		final double[]	sum = new double[] {0};
		
		return source.function((t)->{
			final double	temp = Math.exp(t);
			
			sum[0] += temp;
			return temp;
		}).mul(1/sum[0]);
	}
	
	
	static class Data {
		public final String		word;
		public final boolean	marker;

		public Data(String word, boolean marker) {
			this.word = word;
			this.marker = marker;
		}

		@Override
		public String toString() {
			return "Data [word=" + word + ", marker=" + marker + "]";
		}
	}
}
