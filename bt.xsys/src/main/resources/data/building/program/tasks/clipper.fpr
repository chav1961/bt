% ---------------------------------------------------------------------------- :
%                                                                              :
%       Система автоматизированного проектирования программного обеспечения    :
% для различных систем программирования с ЕЯИ-вводом.      (GSERV204)          :
%                                                                              :
%       Правила генерации программ ввода-корректировки на Clipper.             :
%       Подсистема решения функциональных зодачь.                              :
%                                                                              :
%       (с) 1995г, А.В.Черномырдин, (3511-37-83-26).                           :
%       Версия 2.00 от 01.05.95.                                               :
%                                                                              :
% ---------------------------------------------------------------------------- :

generate.

        % Правила построения функциональных задач.
[ctr_set(10,100)] ??
        [make(ftask,Arm,_)] : bagof(task(Task,Name,Doc,Type),task(Task,Name,Doc,Type),TaskList) ::=
                [ftask(Arm,TaskList)].

        % Правила позадачной генерации.
        [ftask(_,[])] ::= [].

        % Генерация задачи с опорным НСИ.
[access(Arm,Task), ctr_inc(10,Val)] ??
        [ftask(Arm,[task(Task,Name,Doc,form(NSI,NSIRecv)) | T])] : [get(f_group(Doc,Group)), get(main_link(Doc,FirstDoc))] ::=
                [40 * txt($* $), nl,
                 $*  Задача с опорным НСИ $, txt(Task), $ : $, txt(Name), nl,
                 40 * txt($* $), 2 * nl,
                 $function $, txt(Task), nl,
                 $local    iPoz, last_sel := select(), Defs := {}$, nl,
                 p_task(Task,Doc),
                 $// Открыть файлы баз данных и установить отношения.$, nl,
                 use_check($if .not.USE_GROUP({{"$,Group,[]),
                 $select $, txt(FirstDoc), nl,
                 rel_pf2_ccheck(Doc,FirstDoc,Group),
                 $select $, txt(NSI), nl,
                 $// Заполнить список определителей и обнулить БД.$, nl,
                 $USER_BAR(1,lastrec(),"Загрузка НСИ определителей")$, nl,
                 $do while .not.eof()$, nl,
                 $  aadd(Defs,&("{||"+$, txt(NSI), $->$, txt(NSIRecv), $+"}"))$, nl,
                 $  replace $, clear_task(Task,Doc), nl,
                 $  USER_BAR(2,1)$, nl,
                 $  skip$, nl,
                 $  enddo$, nl,
                 $USER_BAR(3)$, 2 * nl,
                 $// Просмотр файла и заполнение НСИ определителей данными.$, nl,
                 fill_task(Task,Doc,FirstDoc,NSI),
                 $// Подготовка задачи к печати и печать.$, nl,
                 $select $, txt(NSI), nl,
                 algo(init_task,Task,nsi(NSI)),
                 $PRINTPART("$, txt(Task), $",65,{">ks",">zs"})$, nl,
                 $set device  to print$, nl,
                 $set printer to .\forms\tempfile.out$, nl,
                 $PRINTPART(">zd")$, nl,
                 $PRINTPART(">zs")$, nl,
                 $USER_BAR(1,lastrec(),"Формирование выходного документа")$, nl,
                 $goto top$, nl,
                 $// Цикл вывода информации по задаче.$, nl,
                 $do while .not.eof()$, nl,
                 $  PRINTPART(">ds")$, nl,
                 algo(one_task,Task,nsi(NSI)),
                 $  USER_BAR(2,1)$, nl,
                 $  skip$, nl,
                 $  enddo$, nl,
                 $PRINTPART(">kd")$, nl,
                 $USER_BAR(3)$, 2 * nl,
                 $// Завершение выполнения задачи.$, nl,
                 $set printer to$, nl,
                 $set device  to screen$, nl,
                 $USER_EXIT("$, Val, $")$, nl,
                 algo(term_task,Task,nsi(NSI)),
                 free_check($FREE_GROUP({"$,Group,[]),
                 $select(last_sel)$, nl,
                 $return 1$, 2 * nl,
                 $* $, 80 * txt($-$), 2 * nl,
                 ftask(Arm,T)
                ].

        % Генерация задачи типа "группировка-суммирование".
[access(Arm,Task), ctr_inc(10,Val)] ??
        [ftask(Arm,[task(Task,Name,Doc,form) | T])] : [get(f_group(Doc,Group)), get(main_link(Doc,Main))] ::=
                [40 * txt($* $), nl,
                 $*  Задача $, txt(Task), $ : $, txt(Name), nl,
                 40 * txt($* $), nl, nl,
                 $procedure $, txt(Task), nl,
                 $local     iPoz, last_sel := select(), was_set := .f.$, nl,
                 $private   g := {}, s := {$, make_summ_task($$,Task,Doc), nl,
                 p_task(Task,Doc), nl,
                 $// Открыть файлы баз данных и установить отношения.$, nl,
                 use_check($if .not.USE_GROUP({{"$,Group,[]),
                 $select $, txt(Main), nl,
                 rel_pf2_ccheck(Doc,FirstDoc,Group),
                 $* Подготовка задачи к печати.$, nl,
                 $select $, txt(Main), nl,
                 algo(init_task,Task,doc(Doc)),
                 $PRINTPART("$, txt(Task), $",65,{">ks",">zs"})$, nl,
                 $set device  to print$, nl,
                 $set printer to .\forms\tempfile.out$, nl,
                 $PRINTPART({">zd",">zs"})$, nl,
                 $USER_BAR(1,lastrec(),"Обработка БД и формирование документа")$, nl,
                 $goto top$, nl,
                 $// Цикл вывода информации по задаче.$, nl,
                 $do while .not.eof()$, nl,
                 parm1_task(Task,Doc),
                 $//  Первоначальные установки по группам.$, nl,
                 $    if .not. was_set$, nl,
                 $      was_set := .t.$, nl,
                 set_task(Task,Doc),
                 $    endif$, nl,
                 grp_task(Task,Doc),
                 sum_task($$,Task,Doc),
                 $    PRINTPART(">ds")$, nl,
                 algo(one_task,Task,doc(Doc)),
                 parm2_task(Task,Doc),
                 $  USER_BAR(2,1)$, nl,
                 $  skip$, nl,
                 $  enddo$, nl,
                 $* Конец цикла - вывести последние итоги.$, nl,
                 $if was_set$, nl,
                 egrp_task(Task,Doc),
                 $endif$, nl,
                 $PRINTPART(">kd")$, nl,
                 $USER_BAR(3)$, 2 * nl,
                 $// Завершение выполнения задачи.$, nl,
                 $set printer to$, nl,
                 $set device  to screen$, nl,
                 $USER_EXIT("$, Val, $")$, nl,
                 algo(term_task,Task,doc(Doc)),
                 free_check($FREE_GROUP({"$,Group,[]),
                 $select(last_sel)$, nl,
                 $return 1$, 2 * nl,
                 $* $, 80 * txt($-$), 2 * nl,
                 ftask(Arm,T)
                ].

        % Генерация задачи типа "группировка-суммирование" с выдачей графика.
[access(Arm,Task), ctr_inc(10,Val), concat([$.\FORMS\$,Task],GName)] ??
        [ftask(Arm,[task(Task,Name,Doc,graphic) | T])] : [get(f_group(Doc,Group)), get(main_link(Doc,Main))] ::=
                [40 * txt($* $), nl,
                 $*  Задача $, txt(Task), $ : $, txt(Name), nl,
                 40 * txt($* $), nl, nl,
                 $procedure $, txt(Task), nl,
                 $local     iPoz, last_sel := select(), was_set := .f.$, nl,
                 $private   g := {}, s $, make_summ_task($ := {$,Task,Doc), nl,
                 p_task(Task,Doc), nl,
                 $// Создать промежуточный файл для данных.$, nl,
                 create_ftask(Task,Doc,GName),
                 $// Открыть файлы баз данных и установить отношения.$, nl,
                 use_check($if .not.USE_GROUP({{"$,[GName | Group],[]),
                 $select $, txt(Main), nl,
                 rel_pf2_ccheck(Doc,FirstDoc,Group),
                 $* Подготовка задачи к печати.$, nl,
                 $select $, txt(Main), nl,
                 algo(init_task,Task,doc(Doc)),
                 $USER_BAR(1,lastrec(),"Обработка БД и формирование документа")$, nl,
                 $goto top$, nl,
                 $// Цикл вывода информации по задаче.$, nl,
                 $do while .not.eof()$, nl,
                 parm1_task(Task,Doc),
                 $//  Первоначальные установки по группам.$, nl,
                 $    if .not. was_set$, nl,
                 $      was_set := .t.$, nl,
                 set_task(Task,Doc),
                 $    endif$, nl,
                 g_grp_task(Task,Doc),
                 sum_task($$,Task,Doc),
                 algo(one_task,Task,doc(Doc)),
                 parm2_task(Task,Doc),
                 $  USER_BAR(2,1)$, nl,
                 $  skip$, nl,
                 $  enddo$, nl,
                 $* Конец цикла - вывести последние итоги.$, nl,
                 $if was_set$, nl,
                 g_egrp_task(Task,Doc),
                 $endif$, nl,
                 $USER_BAR(3)$, 2 * nl,
                 $// Завершение выполнения задачи.$, nl,
                 $USER_MESSAGE("Файл графика сформирован")$, nl,
                 algo(term_task,Task,doc(Doc)),
                 free_check($FREE_GROUP({"$,[GName | Group],[]),
                 $select(last_sel)$, nl,
                 $return 1$, 2 * nl,
                 $* $, 80 * txt($-$), 2 * nl,
                 ftask(Arm,T)
                ].


        [ftask(Arm,[_ | T])] ::= [ftask(Arm,T)].


% *****************************************************************************

        % Правила обработки параметров задачи.
[f_task(Task,parm,_,_)] ??
        [p_task(Task,Doc)] : bagof(parm(Recv,Type),f_task(Task,parm,Type,Recv),ParmList) ::=
                [l_p_task($private $,Doc,ParmList), nl,
                 i_p_task($if .not.USER_DIALOG(10,10,"Параметры решения задачи",setcolor(),$,Doc,ParmList)].
        [p_task(Task,Doc)] ::= [].

        % Объявления параметров задачи.
        [l_p_task(_,_,[])] ::= [].
        [l_p_task(Pref,Doc,[parm(recv(_,_,Recv,Chars,_),intvl) | T])] ::=
                [txt(Pref), $_1$, txt(Recv), $ := $, chars_l_p_task(Chars),
                 $, _2$, txt(Recv), $ := $, chars_l_p_task(Chars),
                 l_p_task($, $,Doc,T)].
        [l_p_task(Pref,Doc,[parm(recv(_,_,Recv,Chars,_),_) | T])] ::=
                [txt(Pref), $_$, txt(Recv), $ := $, chars_l_p_task(Chars), l_p_task($, $,Doc,T)].

        % Обнуление параметров задачи.
        [chars_l_p_task(char(Len,_))] ::= [$space($, len, $)$].
        [chars_l_p_task(digit(Len,0))] ::= [Len * txt($0$)].
[NewLen is Len - Dec - 1] ??
        [chars_l_p_task(digit(Len,Dec))] ::= [NewLen * txt($0$), $.$, Dec * (txt($0$))].
        [chars_l_p_task(date)] ::= [$date()$].
        [chars_l_p_task(time)] ::= [$12.00$].
        [chars_l_p_task(boolean)] ::= [$.f.$].

        % Ввод параметров задачи.
        [i_p_task(_,_,[])] ::= [$)$, nl, $  return$, nl, $endif$, nl].
        [i_p_task(Pref,Form,[parm(recv(Doc,_,Recv,_,_),intvl) | T])] : [get(word(_,recv(Doc,_,Recv,_,_),Text))] ::=
                [txt(Pref), $"$, txt(Text), $ от",@_1$, txt(Recv),
                 $,"$, txt(Text), $ до",@_2$, txt(Recv), i_p_task($,$,Form,T)].
        [i_p_task(Pref,Form,[parm(recv(Doc,_,Recv,_,_),_) | T])] : [get(word(_,recv(Doc,_,Recv,_,_),Text))] ::=
                [txt(Pref), $"$, txt(Text), $",@_$, txt(Recv), i_p_task($,$,Form,T)].


% *****************************************************************************


        % Правила очистки полей опорного НСИ для будущих сумм.
        [clear_task(Task,Doc)] : bagof(summ(Recv1,Recv2),f_task(Task,summ,Recv1,Recv2),SumList) ::=
                [summ_clear_task($$,SumList)].

        [summ_clear_task(Pref,[])] ::= [].
        [summ_clear_task(Pref,[summ(_,recv(_,_,Recv,_,_)) | T])] ::=
                [txt(Pref), txt(Recv), $ with 0$, summ_clear_task($,$,T)].


% *****************************************************************************

        % Правила отнесения информации к НСИ.
        [fill_task(Task,Doc,First,NSI)] ::=
                [algo(init_task,Task,doc(Doc)),
                 $select $, txt(First), nl,
                 $USER_BAR(1,lastrec(),"Отнесение информации из БД к НСИ")$, nl,
                 $goto top$, nl,
                 $* Цикл вывода информации по задаче.$, nl,
                 $do while .not.eof()$, nl,
                 parm1_task(Task,Doc),
                 $    for iPoz := 1 to len(Defs)$, nl,
                 $      if eval(Defs[iPoz])$, nl,
                 $        select $, txt(NSI), nl,
                 $        goto iPoz$, nl,
                 osumm_task(Task,Doc),
                 algo(one_task,Task,doc(Doc)),
                 $        select $, txt(First), nl,
                 $      endif$, nl,
                 $      next$, nl,
                 algo(one_task,Task,doc(Doc)),
                 parm2_task(Task,Doc),
                 $  USER_BAR(2,1)$, nl,
                 $  skip$, nl,
                 $  enddo$, nl,
                 $USER_BAR(3)$, nl,
                 algo(term_task,Task,doc(Doc))
                ].

% *****************************************************************************

        % Правила отсева информации по задаче при отнесении.
[f_task(Task,parm,_,_)] ??
        [parm1_task(Task,_)] : bagof(data(Recv,Type),f_task(Task,parm,Type,Recv),RecvList) ::=
                [parm1_task($  if $,Task,RecvList)].
        [parm1_task(_,_)] ::= [].

        [parm1_task(_,_,[])] ::= [nl].
        [parm1_task(Pref,Task,[data(recv(Doc,_,Name,_,_),intvl) | T])] ::=
                [txt(Pref), $ $, txt(Doc), $->$, txt(Name), $ >= _1$, txt(Name),
                 $ .and. $, txt(Doc), $->$, txt(Name), $ <= _2$, txt(Name),
                 parm1_task($ .and. $,Task,T)].
        [parm1_task(Pref,Task,[data(recv(Doc,_,Name,_,_),_) | T])] ::=
                [txt(Pref), $ $, txt(Doc), $->$, txt(Name), $ = _$, txt(Name),
                 parm1_task($ .and. $,Task,T)].

[f_task(Task,parm,_,_)] ??
        [parm2_task(Task,_)] ::= [$  endif$, nl].
        [parm2_task(_,_)] ::= [].

% *****************************************************************************

        % Правила инициализации групповых переменных задачи.
        [set_task(Task,Doc)] : bagof(DG,f_task(Task,group,DG),DGList) ::=
                [$      g := {$, set1_task($$,DGList), $}$, nl].
        [set_task(Task,Doc)] ::= [].

        % Правила инициализации групп.
        [set1_task(_,[])] ::= [].
        [set1_task(Pref,[RecvList | T])] : get(inv(RecvList,NewRecv)) ::=
                [txt(Pref), set1_rel($$,NewRecv), set1_task($,$,T)].


% *****************************************************************************

        % Правила построения групп в задаче.
        [grp_task(Task,Doc)] : bagof(DG,f_task(Task,group,DG),DGList) ::=
                [grp_task(Task,Doc,DGList,[1,2,3,4,5,6,7,8,9])].
        [egrp_task(Task,Doc)] : bagof(DG,f_task(Task,group,DG),DGList) ::=
                [egrp_task(Doc,DGList,[1,2,3,4,5,6,7,8,9])].

        % Правила обработки каждой группы.
        [grp_task(_,_,[],_)] ::= [].
        [grp_task(Task,Doc,[First | T1],[Num | T2])] : get(inv(First,List)) ::=
                [$    if g[$, Num, $] <> $, set1_rel($$,List), nl,
                 algo(grp_task,Task,doc(Doc),Num),
                 pp_grp_task(Doc,[First | T1],[Num | T2]),
                 $    endif$, nl,
                 grp_task(Task,Doc,T1,T2)
                ].

        [egrp_task(_,[],_)] ::= [].
        [egrp_task(Doc,[_ | T1],[Num | T2])] ::=
                 [egrp_task(Doc,T1,T2), $  PRINTPART(">i$, Num, $")$, nl].

        % Правила печати итогов.
        [pp_grp_task(_,[],_)] ::= [].
        [pp_grp_task(Doc,[First | T1],[Num | T2])] : get(inv(First,List)) ::=
                [pp_grp_task(Doc,T1,T2),
                 $      PRINTPART(">i$, Num, $")$, nl,
                 $      g[$, Num, $] := $, set1_rel($$,List), nl,
                 $      afill(s[$, Num, $],0)$, nl
                ].

% *****************************************************************************

        % Правила суммирования в задаче.
        [sum_task(Suffix,Task,Doc)] : [bagof(Recv1,f_task(Task,summ,Recv1),SumList), bagof(DG,f_task(Task,group,DG),GrpList)] ::=
                [ssum_task(Suffix,SumList,GrpList)].
        [sum_task(_,_,_)] ::= [].

        % Правила цикла суммирования.
[list_len(GrpList,GrpLen), GrpLen > 1] ??
        [ssum_task(Suffix,SumList,GrpList)] ::=
                [$    for iPoz := 1 to $, GrpLen, $     // Многоуровневые итоги$, nl,
                 sum1_task(Suffix,$iPoz$,SumList,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),
                 $      next$, nl].
        [ssum_task(Suffix,SumList,_)] ::= [sum1_task(Suffix,$1$,SumList,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])].

        [sum1_task(_,_,[],_)] ::= [].
        [sum1_task(_,_,_,[])] ::= [].
        [sum1_task(Suffix,Pref,[recv(Doc,_,Name,_,_) | T1],[Num | T2])] ::=
                [$      s$, txt(Suffix), $[$, txt(Pref), $,$, Num, $] += $, txt(Doc), $->$, txt(Name), nl, sum1_task(Suffix,Pref,T1,T2)].


        % Правила суммирования реквизитов в опорном НСИ.
        [osumm_task(Task,Doc)] : bagof(f_task(Task,summ,Recv1,Recv2),f_task(Task,summ,Recv1,Recv2),SummList) ::=
                [osumm_task(SummList)].

        [osumm_task([])] ::= [].
        [osumm_task([f_task(Task,summ,recv(Doc1,_,Recv1,_,_),recv(Doc2,_,Recv2,_,_)) | T])] ::=
                [$        $, txt(Doc2), $->$, txt(Recv2), $ += $, txt(Doc1), $->$, txt(Recv1), nl,
                 osumm_task(T)
                ].


% *****************************************************************************

        % Правила формирования переменных суммирования.
        [make_summ_task(Pref,Task,Doc)] : [bagof(Recv1,f_task(Task,summ,Recv1),SumList),
                                           bagof(DG,f_task(Task,group,DG),GrpList)] ::=
                [make_summ1_task(Pref,GrpList,SumList)].
        [make_summ_task(Pref,Task,Doc)] ::= [].

        [make_summ1_task(Pref,[],_)] ::= [$}$].
        [make_summ1_task(Pref,[_ | T],Sum)] ::= [txt(Pref), make_summ1_task(${$,Sum), make_summ1_task($,$,T,Sum)].

        [make_summ1_task(Pref,[])] ::= [txt(Pref), $0}$].
        [make_summ1_task(Pref,[_ | T])] ::= [txt(Pref), 0, make_summ1_task($,$,T)].


% *****************************************************************************

        % Правила генерации файла хранения графика.
        [create_ftask(Task,Doc,File)] : [bagof(SL,f_task(Task,summ,SL),SumList), bagof(GL,f_task(Task,group,GL),GroupList)] ::=
                [$USER_DBF("$, txt(File), create_ftask($_G$,$c100/100$,$","$,GroupList,[1,2,3,4,5,6,7,8,9],Pref),
                 create_ftask($_S$,$n15.2/15$,Pref,SumList,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],_), $")$, nl
                ].
        [create_ftask(_,_,_)] ::= [].

        [create_ftask(_,_,Pref,[],_,Pref)] ::= [].
        [create_ftask(Letter,Chars,Pref,[_ | T1],[Num | T2],Ready)] ::=
                [txt(Pref), txt(Letter), Num, $/ :$, txt(Chars), create_ftask(Letter,Chars,$,$,T1,T2,Ready)].

% *****************************************************************************

        % Правила построения групп в задаче графика.
        [g_grp_task(Task,Doc)] : bagof(DG,f_task(Task,group,DG),DGList) ::=
                [g_grp_task(Task,Doc,DGList,[1,2,3,4,5,6,7,8,9])].
        [g_egrp_task(Task,Doc)] : bagof(DG,f_task(Task,group,DG),DGList) ::=
                [g_egrp_task(Doc,DGList,[1,2,3,4,5,6,7,8,9])].

        % Правила обработки каждой группы графика.
        [g_grp_task(_,_,[],_)] ::= [].
        [g_grp_task(Task,Doc,[First | T1],[Num | T2])] : get(inv(First,List)) ::=
                [$    if g[$, Num, $] <> $, set1_rel($$,List), nl,
                 algo(grp_task,Task,doc(Doc),Num),
                 g_pp_grp_task(Doc,[First | T1],[Num | T2]),
                 $    endif$, nl,
                 g_grp_task(Task,Doc,T1,T2)
                ].

        [g_egrp_task(_,[],_)] ::= [].
        [g_egrp_task(Doc,[_ | T1],[Num | T2])] ::=
                 [g_egrp_task(Doc,T1,T2), $  PRINTPART(">i$, Num, $")$, nl].

        % Правила печати итогов.
        [g_pp_grp_task(_,[],_)] ::= [].
        [g_pp_grp_task(Doc,[First | T1],[Num | T2])] : get(inv(First,List)) ::=
                [g_pp_grp_task(Doc,T1,T2),
                 $      g[$, Num, $] := $, set1_rel($$,List), nl,
                 $      afill(s[$, Num, $],0)$, nl
                ].

