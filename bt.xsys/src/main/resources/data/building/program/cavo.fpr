% ---------------------------------------------------------------------------- :
%                                                                              :
%       Система автоматизированного проектирования программного обеспечения    :
% для различных систем программирования с ЕЯИ-вводом.      (GSERV205)          :
%                                                                              :
%       Правила генерации программ в среде MS/DOS-Clipper.                     :
%       Общая часть.                                                           :
%                                                                              :
%                                                                              :
%       (с) 1995г, А.В.Черномырдин, (3511-37-83-26).                           :
%       Версия 2.10 от 01.05.96.                                               :
%                                                                              :
% ---------------------------------------------------------------------------- :

generate.

% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила генерации программ АРМа.                                       :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Общий порядок генерации программы.
[make(program)] : bagof(arm(Name,Text),arm(Name,Text),ArmList) ::= [make(program,ArmList)].

[make(program,[])] ::= [].
[make_arm(_), not(make_arm(Name))] ??
[make(program,[arm(Name,Text) | T])] ::= [make(program,T)].
[make(program,[arm(Name,Text) | T])] ::=
                    [make(header,Name,Text),
                     make(call_doc,Name,Text),
                     make(call_task,Name,Text),
                     make(check,Name,Text),
                     make(ftask,Name,Text),
%                     make(algo,Name,Text),
                     make(program,T)].

% *****************************************************************************

        % Генерация головной процедуры.
        [make(header,Name,Text)] : get(system(_,SysText)) ::=
                [file($.\target\$,Name,prg),
                 $TextBlock CopyRights$ , nl,
                 $*           АРМ $, txt(Text), nl,
                 $* (c) 1996, А.В. Черномырдин, Е.Г. Шайхисламова$, 2 * nl,
                 hdr_startup(Name,Text),
                 hdr_start(Name,Text),
                 hdr_term(Name,Text),
                 hdr_classMenu(Name,Text),
                 hdr_registerMenu(Name,Text)
                ].

        % Генерация метода иницализации задачи.
        [hdr_startup(Name,Text)] : get(arm(ArmName,_)) ::=
                [$class User_Window inherit MainWindow$, nl,
                 $//$, tab, $Головное окно системы.$, 2 * nl,
                 $method StartUp(Caption) class App$, nl,
                 $// Подготовка системы к работе.$, nl,
                 tab, $external qq__Fmt, C_PR, D_PR, substr, left, right$, nl,
                 tab, $external ltrim, rtrim, alltrim, strtran, round$, nl,
                 tab, $external padr, padl, padc, dtos, dtoc, val, str, _PIC$, nl,
                 tab, $external AsString, AsSymbol, OEM2ANSI, ANSI2OEM$, 2 * nl,
                 tab, $Enable3dControls()$, nl,
                 tab, $Set Century ON$, nl,
                 tab, $Main_App$, tab, $:= self$, nl,
                 tab, $Main_INI$, tab, $:= INI_File{{".\SYSTEM\$, txt(ArmName), $.CNF",".\PICTURE\$, txt(ArmName), $.FRM"}}$, nl,
                 tab, $Main_Window$, tab, $:= User_Window{self,User_Menu{"USER_MENU"}}$, nl,
                 tab, $Main_Window:Caption$, tab, $:= Caption$, nl,
                 tab, $Main_Window:Icon$, tab, $:= Icon{ResourceId{"USER_ICON",_GetInst()}}$, nl,
                 tab, $Main_Window:Show()$, 2 * nl
                ].

        % Генерация метода завершения задачи.
        [hdr_term(Name,Text)] ::=
                [$method ShutDown() class App$, nl,
                 $// Завершение работы системы.$, nl,
                 tab, $Main_INI:Close()$, nl,
                 tab, $Main_Window:Destroy()$, 2 * nl
                ].

        % Генерация метода запуска задачи.
        [hdr_start(Name,Text)] ::=
                [$method Start() class App$, nl,
                 $// Головной метод системы.$, nl,
                 tab, $private$, tab, $Main_INI, Main_Window, Main_App$, 2 * nl,
                 tab, $self:StartUp("(c) 1996 А.В.Черномырдин, $, txt(Text), $")$, nl,
                 tab, $self:Exec()$, nl,
                 tab, $self:ShutDown()$, 2 * nl,
                 $RESOURCE USER_ICON icon .\system\user_ico.ico$, 2 * nl
                ].

% *****************************************************************************

        % Генерация метода создания меню и собственно меню.
[ctr_set(10,110), ctr_set(11,210), ctr_set(12,310)] ??
        [hdr_classMenu(Name,Text)] ::=
                [$class User_Menu inherit MainMenu$, nl,
                 $// Основное меню программы.$, 2 * nl,
                 $RESOURCE USER_MENU Menu$, nl,
                 $BEGIN$, nl,
                 tab, $POPUP   "Файлы"$, nl,
                 tab, $BEGIN$, nl,
                 hdr_classDoc(Name,Text),
                 2 * tab, $MENUITEM SEPARATOR$, nl,
                 2 * tab, $MENUITEM "Редактор НСИ",101$, nl,
                 2 * tab, $MENUITEM SEPARATOR$, nl,
                 2 * tab, $MENUITEM "Выход",100$, nl,
                 tab, $END$, nl,
                 tab, $POPUP "Задачи"$, nl,
                 tab, $BEGIN$, nl,
                 hdr_classTask(Name,Text),
                 tab, $END$, nl,
                 tab, $POPUP "Утилиты"$, nl,
                 tab, $BEGIN$, nl,
                 2 * tab, $MENUITEM "Копирование БД",300$, nl,
                 2 * tab, $MENUITEM "Восстановление БД",301$, nl,
                 2 * tab, $MENUITEM SEPARATOR$, nl,
                 2 * tab, $MENUITEM "Упаковка БД",302$, nl,
                 2 * tab, $MENUITEM "Индексация БД",303$, nl,
                 2 * tab, $MENUITEM SEPARATOR$, nl,
                 hdr_classAlgo(Name,Text,1),
                 2 * tab, $MENUITEM SEPARATOR$, nl,
                 2 * tab, $MENUITEM "Создание БД",304$, nl,
                 tab, $END$, nl,
                 tab, $POPUP "Окна"$, nl,
                 tab, $BEGIN$, nl,
                 2 * tab, $MENUITEM "Каскад",200$, nl,
                 2 * tab, $MENUITEM "Планшет",201$, nl,
                 2 * tab, $MENUITEM "Закрыть все",202$, nl,
                 tab, $END$, nl,
                 tab, $POPUP "Помощь",Help$, nl,
                 tab, $BEGIN$, nl,
                 2 * tab, $MENUITEM "O программе",510$, nl,
                 tab, $END$, nl,
                 $END$, 2 * nl
                ].

        % Инициализация меню пользователя в задаче.
[ctr_set(10,110), ctr_set(11,210), ctr_set(12,310)] ??
        [hdr_registerMenu(Name,Text)] ::=
                [$method Init(oRes) class User_Menu$, nl,
                 $// Создание объектов меню.$, 2 * nl,
                 tab, $super:Init(oRes)$, nl,
                 hdr_registerDoc(Name,Text),
                 hdr_registerTask(Name,Text),
                 hdr_registerAlgo(Name,Text,1),
                 tab, $return self$, 2 * nl
                ].

% *****************************************************************************

        % Регистрация документов в метках меню.
        [hdr_classDoc(Arm,_)] : bagof(doc(Doc,Name,oper),doc(Doc,Name,oper),DocList) ::=
                [doclist1_make(Arm,DocList)].

        [doclist1_make(_,[])] ::= [].
[access(Arm,Doc,_), not(under(_,Doc)), ctr_inc(10,Id)] ??
        [doclist1_make(Arm,[doc(Doc,Name,oper) | T])] ::=
                [2 * tab, $MENUITEM "$, txt(Name), $",$, Id, nl, doclist1_make(Arm,T)].
        [doclist1_make(Arm,[doc(Doc,Name,oper) | T])] ::= [doclist1_make(Arm,T)].


        % Регистрация документов в классе меню.
        [hdr_registerDoc(Arm,_)] : bagof(doc(Doc,Name,oper),doc(Doc,Name,oper),DocList) ::=
                [doclist2_make(Arm,DocList)].

        [doclist2_make(_,[])] ::= [].
[access(Arm,Doc,_), not(under(_,Doc)), ctr_inc(10,Id)] ??
        [doclist2_make(Arm,[doc(Doc,Name,oper) | T])] ::=
                [tab, $self:RegisterItem($, Id, $,HyperLabel{#$, txt(Doc), $,"$, txt(Name), $"})$, nl, doclist2_make(Arm,T)].
        [doclist2_make(Arm,[doc(Doc,Name,oper) | T])] ::= [doclist2_make(Arm,T)].

% *****************************************************************************

        % Регистрация задач в метках меню.
        [hdr_classTask(Arm,_)] : bagof(task(Task,Name,Doc,Type),task(Task,Name,Doc,Type),TaskList) ::=
                [tasklist1_make(Arm,TaskList)].

        [tasklist1_make(_,[])] ::= [].
[access(Arm,Task), ctr_inc(11,Id)] ??
        [tasklist1_make(Arm,[task(Task,Name,Doc,Type) | T])] ::=
                [2 * tab, $MENUITEM "$, txt(Name), $",$, Id, nl, tasklist1_make(Arm,T)].
        [tasklist1_make(Arm,[task(Task,Name,Doc,Type) | T])] ::= [tasklist1_make(Arm,T)].


        % Регистрация задач в классе меню.
        [hdr_registerTask(Arm,_)] : bagof(task(Task,Name,Doc,Type),task(Task,Name,Doc,Type),TaskList) ::=
                [tasklist2_make(Arm,TaskList)].

        [tasklist2_make(_,[])] ::= [].
[access(Arm,Task), ctr_inc(11,Id)] ??
        [tasklist2_make(Arm,[task(Task,Name,Doc,Type) | T])] : get(doc(Doc,DocName,_))::=
                [tab, $self:RegisterItem($, Id, $,HyperLabel{#$, txt(Task), $,"$, txt(DocName), $","$, txt(Name), $"})$, nl, tasklist2_make(Arm,T)].
        [tasklist2_make(Arm,[task(Task,Name,Doc,Type) | T])] ::= [tasklist2_make(Arm,T)].


% *****************************************************************************

        % Регистрация алгоритмов в метках меню.
[algo(r_b,use,_,_,_), ctr_inc(12,Id)] ??
        [hdr_classAlgo(Arm,_,1)] ::=
                [2 * tab, $MENUITEM "Восстановление остатков ",$, Id, nl, hdr_classAlgo(Arm,_,2)].
        [hdr_classAlgo(Arm,_,1)] ::= [hdr_classAlgo(Arm,_,2)].

        [hdr_classAlgo(Arm,_,2)] ::= [].


        % Регистрация алгоритмов в классе меню.
[algo(r_b,use,_,_,_), ctr_inc(12,Id)] ??
        [hdr_registerAlgo(Arm,_,1)] ::=
                [tab, $self:RegisterItem($, Id, $,HyperLabel{#REST_REST,"Восстановление остатков","Пересчет полей остатков по фактическому соотоянию БД"})$, nl, hdr_registerAlgo(Arm,_,2)].
        [hdr_registerAlgo(Arm,_,1)] ::= [hdr_registerAlgo(Arm,_,2)].

        [hdr_registerAlgo(Arm,_,2)] ::= [].

% *****************************************************************************

        % Внесение программ вызова документов в головное окно.
        [make(call_doc,Name,Text)] : bagof(doc(Doc,DocName),doc(Doc,DocName,oper),DocList) ::=
                [call_doc(Name,Text,DocList)].

        [call_doc(_,_,[])] ::= [].
[not(under(_,Doc))] ??
        [call_doc(N,Txt,[doc(Doc,Name) | T])] ::=
                [$method $, txt(Doc), $() class User_Window$, nl,
                 $// Вызов документа : $, txt(Name), nl,
                 tab, $local$, tab, $Doc := $, txt(Doc), $_W{self,,} as $, txt(Doc), $_W$, 2 * nl,
                 tab, $Doc:Show()$, 2 * nl,
                 call_doc(N,Txt,T)
                ].
        [call_doc(N,Txt,[_ | T])] ::= [call_doc(N,Txt,T)].

        % Внесение программ вызова задач в головное окно.
        [make(call_task,Name,Text)] : bagof(task(Task,TaskName,Form,Type),task(Task,TaskName,Form,Type),TaskList) ::=
                [call_task(Name,Text,TaskList)].

        [call_task(_,_,[])] ::= [].
        [call_task(N,Txt,[task(Task,Name,_,form(_,_)) | T])] ::=
                [$method $, txt(Task), $() class User_Window$, nl,
                 $// Вызов документа : $, txt(Name), nl,
                 tab, $local$, tab, $oAsk := USER_DIALOG{self,ResourceId{"ASK_$, txt(Task), $",_GetInst()},{$, parm_ftask(Task), $}) as USER_DIALOG$, nl,
                 tab, $local$, tab, $oTask as $, txt(Task), nl,
                 tab, $private$, tab, $P$, 2 * nl,
                 tab, $if oAsk:Show()$, nl,
                 2 * tab, $P$, tab, $:= oAsk:Parm$, nl,
                 2 * tab, $oTask$, tab, $:= $, txt(Task), ${self,{||$, filter_ftask(Task), $}}$, nl,
                 2 * tab, $oTask:oPP:Print({">>zd",">>zs"})$, nl,
                 2 * tab, $oTask:Execute(self,"Формирование документа")$, nl,
                 2 * tab, $oTask:Print(self,"Печать документа")$, nl,
                 2 * tab, $oTask:Close()$, nl,
                 tab, $endif$, 2 * nl,
                 call_task(N,Txt,T)
                ].
        [call_task(N,Txt,[task(Task,Name,_,form) | T])] ::=
                [$method $, txt(Task), $() class User_Window$, nl,
                 $// Вызов документа : $, txt(Name), nl,
                 tab, $local$, tab, $oAsk := USER_DIALOG{self,ResourceId{"ASK_$, txt(Task), $",_GetInst()},{$, parm_ftask(Task), $}) as USER_DIALOG$, nl,
                 tab, $local$, tab, $oTask as $, txt(Task), nl,
                 tab, $private S := {$, init_summ_task1(Task), $}, G, P$, 2 * nl,
                 tab, $if oAsk:Show()$, nl,
                 2 * tab, $P$, tab, $:= oAsk:Parm$, nl,
                 2 * tab, $oTask$, tab, $:= $, txt(Task), ${self,{||$, filter_ftask(Task), $}}$, nl,
                 2 * tab, $oTask:oPP:Print({">>zd",">>zs"})$, nl,
                 2 * tab, $oTask:Execute(self,"Формирование документа")$, nl,
                 2 * tab, $oTask:Close()$, nl,
                 tab, $endif$, 2 * nl,
                 call_task(N,Txt,T)
                ].


% *****************************************************************************

        % Вспомогательные предикаты для описания задач.
        [init_summ_task1(Task)] : [bagof(list(Groups),f_task(Task,group,Groups),GroupList),
                                   bagof(Summs,f_task(Task,summ,Summs),SummList)] ::=
                [init_summ_task1(GroupList,SummList)].

        [init_summ_task1(_,[])] ::= [].
[list_len(List1,Len)] ??
        [init_summ_task1(List1,List2)] ::= [init_summ1_task1(Len,$$,List2)].

        [init_summ1_task1(0,_,_)] ::= [].
[NewVal is Val - 1, list_len(List,Len)] ??
        [init_summ1_task1(Val,Pref,List)] ::=
                [txt(Pref), ${$, init1_summ1_task1(Len,$$), $}$, init_summ1_task1(NewVal,$,$,List)].

        [init1_summ1_task1(0,_)] ::= [].
[NewVal is Val - 1] ??
        [init1_summ1_task1(Val,Pref)] ::= [txt(Pref), 0, init1_summ1_task1(NewVal,$,$)].


% *****************************************************************************

        % Формирование списка парамеров задачи.
[f_task(Task,parm,_,_)] ??
        [parm_ftask(Task)] : bagof(parm(Type,Recv),f_task(Task,parm,Type,Recv),ParmList) ::=
                [parm_ftask(Task,$$,ParmList)].
        [parm_ftask(_)] ::= [].

        [parm_ftask(_,_,[])] ::= [].
        [parm_ftask(Task,Pref,[parm(Mode,recv(_,_,_,char(_,_),_)) | T])] ::=
                [txt(Pref), parm1_ftask(Mode,$""$), parm_ftask(Task,$,$,T)].
        [parm_ftask(Task,Pref,[parm(Mode,recv(_,_,_,digit(_,_),_)) | T])] ::=
                [txt(Pref), parm1_ftask(Mode,$0$), parm_ftask(Task,$,$,T)].
        [parm_ftask(Task,Pref,[parm(Mode,recv(_,_,_,date,_)) | T])] ::=
                [txt(Pref), parm1_ftask(Mode,$today()$), parm_ftask(Task,$,$,T)].
        [parm_ftask(Task,Pref,[parm(Mode,recv(_,_,_,time,_)) | T])] ::=
                [txt(Pref), parm1_ftask(Mode,$12.00$), parm_ftask(Task,$,$,T)].
        [parm_ftask(Task,Pref,[parm(Mode,recv(_,_,_,boolean,_)) | T])] ::=
                [txt(Pref), parm1_ftask(Mode,$false$), parm_ftask(Task,$,$,T)].

        [parm1_ftask(single,Value)] ::= [txt(Value)].
        [parm1_ftask(intvl,Value)] ::= [txt(Value), $,$, txt(Value)].

% *****************************************************************************

        % Фильтрация записей по задаче.
[f_task(Task,parm,_,_)] ??
        [filter_ftask(Task)] : bagof(parm(Type,Recv),f_task(Task,parm,Type,Recv),ParmList) ::=
                [filter_ftask(Task,$$,1,ParmList)].
        [filter_ftask(_)] ::= [$true$].

        [filter_ftask(_,_,_,[])] ::= [].
[NewCount is Count + 1] ??
        [filter_ftask(Task,Pref,Count,[parm(single,recv(Doc,_,Name,_,_)) | T])] ::=
                [txt(Pref), txt(Doc), $->$, txt(Name), $=P[$, Count, $]$, filter_ftask(Task,$.and.$,NewCount,T)].
[NewCount is Count + 1, Step is Count + 2] ??
        [filter_ftask(Task,Pref,Count,[parm(intvl,recv(Doc,_,Name,_,_)) | T])] ::=
                [txt(Pref), txt(Doc), $->$, txt(Name), $>=P[$, Count, $].and.$,
                 txt(Doc), $->$, txt(Name), $<=P[$, NewCount, $]$, filter_ftask(Task,$.and.$,Step,T)
                ].

% *****************************************************************************
