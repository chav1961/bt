% ---------------------------------------------------------------------------- :
%                                                                              :
%       Система автоматизированного проектирования программного обеспечения    :
% для различных систем программирования с ЕЯИ-вводом.      (GSERV205)          :
%                                                                              :
%       Правила генерации программ ввода-корректировки на Clipper.             :
%       Подсистема ввода-кооректировки документов.                             :
%                                                                              :
%       (с) 1996г, А.В.Черномырдин, (3511-37-83-26).                           :
%       Версия 2.10 от 01.05.96.                                               :
%                                                                              :
% ---------------------------------------------------------------------------- :

generate.

        % Генерация подокументных программ контроля-преобразования.
        [make(check,Arm,_)] : bagof(doc(Doc,Name),doc(Doc,Name,oper),DocList) ::=
                [file($.\target\$,servers,prg),
                 ccheck_h_parm_servers(Arm),
                 ccheck_servers(Arm,DocList),
                 file($.\target\$,windows,prg),
                 ccheck_h_parm_windows(Arm),
                 ccheck_windows(Arm,DocList)
                ].

% *****************************************************************************

        % Генерация определений серверов документов.
        [ccheck_servers(_,[])] ::= [].
[access(Arm,Doc,AccessMode)] ??
        [ccheck_servers(Arm,[doc(Doc,Name) | T])] ::=
            [$class $, txt(Doc), $_S inherit ShowServer$, nl,
             $// Сервер для работы с документом.$, 2 * nl,
             $method Init(List,Shared,ReadWrite,oOwner) class $, txt(Doc), $_S$, nl,
             $// Инициализация сервера документа.$, 2 * nl,
             tab, $super:Init(List,Shared,ReadWrite,oOwner)$, nl,
             tab, $return self$, 2 * nl,
             $method Append() class $, txt(Doc), $_S$, nl,
             $// Особенности обработки добавления записей.$, 2 * nl,
             tab, $local$, tab, $BackRec, Result$, 2 * nl,
             tab, $self:SuspendNotification()$, nl,
             tab, $Result$, tab, $:= super:Append()$, nl,
             tab, $BackRec := self:RecNo$, nl,
             assign_keys_servers(Arm,Doc), nl,
             tab, $self:ResetNotification()$, nl,
             tab, $self:Owner:_Bound(self:Owner:OwnerId:IndexValue())$, nl,
             tab, $self:GoTo(BackRec)$, nl,
             tab, $return$, tab, $Result$, 2 * nl,
             assign_ccheck_servers(Arm,Doc),
             ccheck_servers(Arm,T)
            ].
        [ccheck_servers(Arm,[_ | T])] ::= [ccheck_servers(Arm,T)].

        % Перепись ключей при добавлении новых записей (сыбка нада).
        [assign_keys_servers(Arm,Doc)] : bagof(recv(Name,Chars,From,FromName),recv(Doc,k,Name,Chars,from(From,FromName,oper)),RecvList) ::=
            [assign_keys_servers(RecvList)].

        [assign_keys_servers([])] ::= [].
        [assign_keys_servers([recv(Name,char(_,_),From,_) | T])] ::=
            [tab, $self:$, txt(Name), tab, $:= ANSI2OEM($, txt(From), $->$, txt(Name), $)$, nl, assign_keys_servers(T)].
        [assign_keys_servers([recv(Name,_,From,_) | T])] ::=
            [tab, $self:$, txt(Name), tab, $:= $, txt(From), $->$, txt(Name), nl, assign_keys_servers(T)].

% *****************************************************************************

        % Генерация команд контроля реквизитов.
        [assign_ccheck_servers(Arm,Doc)] : bagof(recv(Doc,Key,Name,Chars,From),recv(Doc,Key,Name,Chars,From),RecvList) ::=
            [assign_servers(Arm,Doc,RecvList), access_servers(Arm,Doc,RecvList)].

        % Отработка команд контроля.
        [assign_servers(_,_,[])] ::= [].
[ctr_set(10,0)] ??
        [assign_servers(Arm,Doc,[Recv | T])] ::= [assign_servers(1,Recv), assign_servers(Arm,Doc,T)].

        % Построение команд контроля уникальности.
        [assign_servers(1,recv(Doc,k,Name,Chars,none))] : get(words(_,recv(_,_,Name,_,_),Text)) ::=
            [header_assign_servers(Name,Doc),
             tab, $if qq__ChkKey(self,"$, txt(Name), $",Value)$, nl,
             2 * tab, $if Warnings{Main_Window,"ВНИМАНИЕ",'Такое значение в базе уже есть ! Принять ',BUTTONYESNO + BOXICONASTERISK}:Show() = IDYES$, nl,
             3 * tab, $return super:FieldPut(#$, txt(Name), $,Value)$, nl,
             2 * tab, $else$, nl,
             3 * tab, $return Value$, nl,
             2 * tab, $endif$, nl,
             tab, $else$, nl,
             2 * tab, $return super:FieldPut(#$, txt(Name), $,Value)$, nl,
             tab, $endif$, nl,
             assign_servers(2,recv(Doc,k,Name,Chars,none))
            ].
        [assign_servers(1,Recv)] ::= [assign_servers(2,Recv)].

        % Построение команд контроля по НСИ.
[recv(NSI,l(_),Recv,_,_)] ??
        [assign_servers(2,recv(Doc,Key,Name,Chars,from(NSI,nsi,Recv)))] : [get(word(_,doc(NSI,Text,nsi),_)), bagof(recv(Doc,_Key,_Name,_Chars,from(NSI,nsi,_Recv)),recv(Doc,_Key,_Name,_Chars,from(NSI,nsi,_Recv)),RecvList)] ::=
            [header_assign_servers(Name,Doc),
             tab, $Use1$, tab, $:= USER_H_CASE{Main_Window,Use2 := ShowServer{{".\NSI\$, txt(NSI), $",".\NSI\$, txt(NSI), $"},DBSHARED},"$, txt(Text), $","$, flist_assign_servers($$,RecvList), $"}$, nl,
             tab, $if Use1:Show(AsString(Value),"")$, nl,
             fassign_assign_servers(NSI,RecvList,Name),
             2 * tab, $Use2:Close()$, nl,
             tab, $endif$, nl,
             assign_servers(3,recv(Doc,Key,Name,Chars,from(NSI,nsi,Recv)))
            ].
        [assign_servers(2,recv(Doc,Key,Name,Chars,from(NSI,nsi,Recv)))] : [get(word(_,doc(NSI,Text,nsi),_)), bagof(recv(Doc,_Key,_Name,_Chars,from(NSI,nsi,_Recv)),recv(Doc,_Key,_Name,_Chars,from(NSI,nsi,_Recv)),RecvList)] ::=
            [header_assign_servers(Name,Doc),
             tab, $Use1$, tab, $:= USER_CASE{Main_Window,Use2 := ShowServer{{".\NSI\$, txt(NSI), $",".\NSI\$, txt(NSI), $"},DBSHARED},"$, txt(Text), $","$, flist_assign_servers($$,RecvList), $"}$, nl,
             tab, $if Use1:Show(AsString(Value),"")$, nl,
             fassign_assign_servers(NSI,RecvList,Name),
             2 * tab, $Use2:Close()$, nl,
             tab, $endif$, nl,
             assign_servers(3,recv(Doc,Key,Name,Chars,from(NSI,nsi,Recv)))
            ].
        [assign_servers(2,Recv)] ::= [assign_servers(3,Recv)].

        % Формирование списка полей.
        [flist_assign_servers(_,[])] ::= [].
        [flist_assign_servers(Pref,[recv(Doc,_,Name,char(Len,Mid),_) | T])] : get(word(_,recv(_,_,Name,_,_),Text)) ::=
            [txt(Pref), txt(Name), $/$, txt(Text), $:c$, Len, $/$, Mid, flist_assign_servers($,$,T)].
        [flist_assign_servers(Pref,[recv(Doc,_,Name,digit(Len,Dec),_) | T])] : get(word(_,recv(_,_,Name,_,_),Text)) ::=
            [txt(Pref), txt(Name), $/$, txt(Text), $:n$, Len, $.$, Dec, $/$, Len, flist_assign_servers($,$,T)].
        [flist_assign_servers(Pref,[recv(Doc,_,Name,date,_) | T])] : get(word(_,recv(_,_,Name,_,_),Text)) ::=
            [txt(Pref), txt(Name), $/$, txt(Text), $:d8/8$, flist_assign_servers($,$,T)].
        [flist_assign_servers(Pref,[recv(Doc,_,Name,time,_) | T])] : get(word(_,recv(_,_,Name,_,_),Text)) ::=
            [txt(Pref), txt(Name), $/$, txt(Text), $:n5.2/5$, flist_assign_servers($,$,T)].
        [flist_assign_servers(Pref,[recv(Doc,_,Name,boolean,_) | T])] : get(word(_,recv(_,_,Name,_,_),Text)) ::=
            [txt(Pref), txt(Name), $/$, txt(Text), $:l1/1$, flist_assign_servers($,$,T)].

        % Формиование списка присваиваний.
        [fassign_assign_servers(_,[],_)] ::= [].
        [fassign_assign_servers(NSI,[recv(Doc,_,Name,_,_) | T],Name)] ::= [fassign_assign_servers(NSI,T,Name)].
        [fassign_assign_servers(NSI,[recv(Doc,_,Name,_,_) | T],RecvName)] ::=
            [2 * tab, $self:$, txt(Name), tab, $:= $, txt(NSI), $->$, txt(Name), nl, fassign_assign_servers(NSI,T,RecvName)].

        % Построение команд контроля по алгоритмам.
        [assign_servers(3,recv(Doc,Key,Name,Chars,From))] ::=
            [$assign $, txt(Name), $(Value) class $, txt(Doc), $_S$, nl,
             tab, $return$, tab, $self:FieldPut(#$, txt(Name), $,Value)$, 2 * nl
            ].


        % Отработка доступа к серверу.
        [access_servers(_,_,[])] ::= [].
[ctr_set(10,0)] ??
        [access_servers(Arm,Doc,[Recv | T])] ::= [access_servers(Recv), access_servers(Arm,Doc,T)].

        % Построение команд доступа к полям.
        [access_servers(recv(Doc,Key,Name,Chars,From))] ::=
            [$access $, txt(Name), $() class $, txt(Doc), $_S$, nl,
             tab, $return$, tab, $self:FieldGet(#$, txt(Name), $)$, 2 * nl
            ].

        % Выдача заголовка программы контроля.
[ctr_is(10,0), ctr_set(10,1)] ??
        [header_assign_servers(Name,Doc)] ::=
            [$assign $, txt(Name), $(Value) class $, txt(Doc), $_S$, nl,
             $// Программа контроля реквизита.$, nl,
             tab, $private$, tab, $Use1, Use2, Use3$, 2 * nl
            ].
        [header_assign_servers(Name,Doc)] ::= [].

% *****************************************************************************

        % Генерация определений окон с серверами.
        [ccheck_windows(_,[])] ::= [].
[access(Arm,Doc,AccessMode)] ??
        [ccheck_windows(Arm,[doc(Doc,Name) | T])] : [bagof(Names,under(Doc,Names),UnderList)] ::=
            [$class $, txt(Doc), $_W inherit $, pair_dual(Doc), nl,
             $// Окно для работы с документом.$, nl,
             ccheck_windows_under(UnderList), 2 * nl,
             $method Init(oWindow,iCtl,oOwner) class $, txt(Doc), $_W$, nl,
             $// Создание окна документа.$, 2 * nl,
             tab, $super:Init(oWindow,iCtl,$, txt(Doc), $_S{{"$, txt(Doc), $","$, txt(Doc), $"},DBSHARED,DBREADWRITE,self},"$, txt(Doc), $_Screen",oOwner)$, nl,
             tab, $self:Icon$, tab, $:= Icon{ResourceId{"$, txt(Doc), $_ICON",_GetInst()}}$, nl,
             ccheck_windows_under_assign(UnderList),
             tab, $self:Show()$, tab, $// Дефект CA-VO : иначе меню не высветится !$, nl,
             tab, $self:Menu$, tab, $:= $, txt(Doc), $_MNU{}$, nl,
             tab, $self:Hide()$, nl,
             tab, $self:Show()$, nl,
             tab, $self:Server:GoTop()$, nl,
             tab, $return self$, 2 * nl,
             $RESOURCE $, txt(Doc), $_ICON icon .\system\user_ico.ico$, 2 * nl,
             $method _ExitShow(Mode) class $, txt(Doc), $_W$, nl,
             $// Завершение работы окна либо переключение на головное окно.$, nl,
             ccheck_windows_under_exit(UnderList),
             tab, $super:_ExitShow(Mode)$, 2 * nl,
             $method _Append() class $, txt(Doc), $_W$, nl,
             $// Переключение строк на единичные кадры при вводе.$, nl,
             tab, $local$, tab, $Result := super:_Append()$, 2 * nl,
             tab, $self:_Switch()$, nl,
             tab, $return$, tab, $Result$, 2 * nl,
             $method Notify(Mode,Parm) class $, txt(Doc), $_W$, nl,
             $// Отработка синхронных перемещений по БД в многодокументном интерфейсе.$, nl,
             tab, $if self:Last_RecNo <> self:Server:RecNo$, nl,
             bound_windows_under(UnderList),
             tab, $endif$, nl,
             tab, $return$, tab, $super:Notify(Mode,Parm)$, 2 * nl,
             $class $, txt(Doc), $_MNU inherit ShowWindow_Menu$, nl,
             $// Меню для работы с окнами документов$, 2 * nl,
             $method Init() class $, txt(Doc), $_MNU$, nl,
             $// Создание меню для объекта.$, nl,
             tab, $super:Init("ShowWindow_MNU")$, nl,
             tab, $return self$, 2 * nl,
             ccheck_windows(Arm,T)
            ].
        [ccheck_windows(Arm,[_ | T])] ::= [ccheck_windows(Arm,T)].

        % Отработка дуального окна и окна-пары.
[under(_,Doc)] ??
        [pair_dual(Doc)] ::= [$PairWindow$].
        [pair_dual(Doc)] ::= [$DualWindow$].


% *****************************************************************************

        % Генерация подчиненных документов.
        [ccheck_windows_under([])] ::= [].
        [ccheck_windows_under([Name | T])] ::=
            [tab, $export$, tab, txt(Name), $ as $, txt(Name), $_W$, nl, ccheck_windows_under(T)].

        % Генерация команд инициализации подчиненных документов.
        [ccheck_windows_under_assign([])] ::= [].
        [ccheck_windows_under_assign([Name | T])] ::=
            [tab, $self:$, txt(Name), tab, $:= $, txt(Name), $_W{oWindow,,self}$, nl, ccheck_windows_under_assign(T)].

        % Генерация команд закрытия подчиненных документов.
        [ccheck_windows_under_exit([])] ::= [].
        [ccheck_windows_under_exit([Name | T])] ::=
            [tab, $self:$, txt(Name), $:_ExitShow(true)$, nl,
             ccheck_windows_under_exit(T)
            ].

        % Генерация методов обработки окон документов.

        % Генерация синхронизации подчиненных документов.
        [bound_windows_under([])] ::= [].
        [bound_windows_under([Name | T])] ::=
            [tab, $self:$, txt(Name), $:_Bound(self:IndexValue())$, nl,
             bound_windows_under(T)
            ].

% *****************************************************************************

        % Генерация класса настройки системы (должен быть в любом случае).
        [ccheck_h_parm_windows(_)] ::=
            [$class H_PARM_W inherit DualWindow$, nl,
             $// Класс окон настройки системы.$, 2 * nl,
             $method Init(oWindow,iCtl,oOwner) class H_PARM_W$, nl,
             $// Создание окна документа.$, 2 * nl,
             tab, $super:Init(oWindow,iCtl,H_PARM_S{".\SYSTEM\H_PARM",DBSHARED,DBREADWRITE},"H_PARM_Screen",oOwner)$, nl,
             tab, $self:ViewAs(#FormView)$, nl,
             tab, $self:Icon$, tab, $:= Icon{ResourceId{"USER_ICON",_GetInst()}}$, nl,
             tab, $self:Show()$, tab, $// Дефект CA-VO : иначе меню не высветится !$, nl,
             tab, $self:Menu$, tab, $:= SHOWWINDOW_MNU{"ShowWindow_MNU"}$, nl,
             tab, $self:Hide()$, nl,
             tab, $self:Show()$, nl,
             tab, $if self:Server:RecCount = 0$, nl,
             2 * tab, $self:Server:Append()$, nl,
             tab, $endif$, nl,
             tab, $self:Server:GoTop()$, nl,
             tab, $return self$, 2 * nl,
             $method _Switch() class H_PARM_W$, nl,
             $// Этот метод игнорируется.$, nl,
             tab, $self:Hide()$, nl,
             tab, $self:Show()$, 2 * nl,
             $method _Append() class H_PARM_W$, nl,
             $// Этот метод игнорируется.$, 2 * nl,
             $method _Duplicate() class H_PARM_W$, nl,
             $// Этот метод игнорируется.$, 2 * nl,
             $method _DelRecall() class H_PARM_W$, nl,
             $// Этот метод игнорируется.$, 2 * nl
            ].

        [ccheck_h_parm_servers(_)] ::=
            [$class H_PARM_S inherit ShowServer$, nl,
             $// Класс настройки системы.$, 2 * nl
            ].


% *****************************************************************************
