% ---------------------------------------------------------------------------- :
%                                                                              :
%       Система автоматизированного проектирования программного обеспечения    :
% для различных систем программирования с ЕЯИ-вводом.      (GSERV205)          :
%                                                                              :
%       Правила генерации баз данных для подсистемы администратора БД.         :
% Генепация ведется в расчете на полноченную SQL-систему.                      :
%                                                                              :
%       (с) 2003г, А.В.Черномырдин, (35-24-65 аб 1326).                        :
%       Версия 2.11 от 01.03.2003.                                             :
%                                                                              :
% ---------------------------------------------------------------------------- :

generate.

% ---------------------------------------------------------------------------- :
%                                                                              :
%       Подсистема генерации файла конфигурации БД.                            :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Общее правило построения таблиц баз данных
[make(database)] : [bagof(doc(Name,Text,Type),doc(Name,Text,Type),DocList), get(system(SName,STxt))] ::=
                [file($.\target\$,SName,ini),
                 $[SYSTEM]$, nl,
                 $Global=.\$, nl,
                 $[CONNECTIONS]$, nl,
                 $Driver1=oracle.jdbc.driver.OracleDriver$, nl,
                 $Driver2=sun.jdbc.odbc.JdbcOdbcDriver$, nl,
                 $DefaultDSN=DSN1$, nl,
                 $DSN1=jdbc.oracle.thin.system/sasa21@localhost:1521:sasa21,SYSTEM,*$, nl,
                 $DSN2=jdbc.odbc.ORACLE_DB,SYSTEM,*$, nl,
                 file($.\target\system\$,SName,sql),
                 db_seq(SName), db_nsi(DocList),
                 db_oper(DocList),
                 db_task(DocList),
                 db_package(SName),
                 db_triggers(SName),
                 db_package_body(SName),
                 db_roles(SName)
                ].

        % Правила генерации секвенса и схемы.
        [db_seq(Name)] ::=
               [$drop user $, txt(Name), $_user cascade;$, nl,
                $create user $, txt(Name), $_user identified by $, txt(Name), $_passwd;$, nl,
                $grant all privileges to $, txt(Name), $_user;$, nl,
                $alter user $, txt(Name), $_user default role all;$, nl,
                $connect $, txt(Name), $_user/$, txt(Name), $_passwd;$, nl,
                $create schema authorization $, txt(Name), $_user;$, nl,
                $create sequence $, txt(Name), $_seq maxvalue 100000000000000;$, nl
               ].

%
%       Генерация описателей справочников.
%

        % Правила генерации описателей справочников.
        [db_nsi([])] ::= [].
        [db_nsi([doc(Doc,Caption,nsi) | T])] : bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList) ::=
               [$create table $, txt(Doc),
                db_nsi1($($,RecvList),
                db_constr_primary(Doc,RecvList), $);$, nl, nl,
                db_seq_nsi(Doc), nl,
                $comment on table $, txt(Doc), $ is '$, txt(Caption), $';$, nl,
                db_comment(RecvList), nl,
                db_nsi(T)
               ].
        [db_nsi([doc(_,_,_)|T])] ::= [db_nsi(T)].


        % Генерация строки описателя для поля НСИ.
        [db_nsi1(_,[])] ::= [].
        [db_nsi1(Symbol,[recv(_,_,$LEVEL$,_,_) | T])] ::= [db_nsi1(Symbol,T)].
        [db_nsi1(Symbol,[recv(Doc,Mode,Name,char(Len,_),_) | T])] ::=
                [txt(Symbol), tab, txt(Name), $ varchar2($, Len, $)$, db_constr_null(Mode), nl,
                 db_nsi1($,$,T)
                ].
        [db_nsi1(Symbol,[recv(Doc,Mode,Name,digit(Len,0),_) | T])] ::=
                [txt(Symbol), tab, txt(Name), $ number($, Len, $)$, db_constr_null(Mode), nl,
                 db_nsi1($,$,T)
                ].
        [db_nsi1(Symbol,[recv(Doc,Mode,Name,digit(Len,Dec),_) | T])] ::=
                [txt(Symbol), tab, txt(Name), $ number($, Len, $,$, Dec, $)$, db_constr_null(Mode), nl,
                 db_nsi1($,$,T)
                ].
        [db_nsi1(Symbol,[recv(Doc,Mode,Name,date,_) | T])] ::=
                [txt(Symbol), tab, txt(Name), $ date$, db_constr_null(Mode), nl,
                 db_nsi1($,$,T)
                ].
        [db_nsi1(Symbol,[recv(Doc,Mode,Name,time,_) | T])] ::=
                [txt(Symbol), tab, txt(Name), $ timestamp$, db_constr_null(Mode), nl,
                 db_nsi1($,$,T)
                ].
        [db_nsi1(Symbol,[recv(Doc,Mode,Name,boolean,_) | T])] ::=
                [txt(Symbol), tab, txt(Name), $ integer$, db_constr_null(Mode), nl,
                 db_nsi1($,$,T)
                ].


        % Генерация ключевых констрайнтов для ключей справочника.
        [db_nsi2(_,[])] ::= [].
        [db_nsi2(Symbol,[recv(_,_,$LEVEL$,_,_) | T])] ::= [db_nsi2(Symbol,T)].
        [db_nsi2(Symbol,[recv(Doc,k,Name,_,_) | T])] ::=
                [txt(Symbol), txt(Name), $ $, db_nsi2($,$,T)].
        [db_nsi2(Symbol,[_ | T])] ::= [db_nsi2(Symbol,T)].


        % Генерация комментариев для полей справочника и оперативной БД.
        [db_comment([])] ::= [].
        [db_comment([recv(_,_,$LEVEL$,_,_) | T])] ::= [db_comment(T)].
        [db_comment([recv(Doc,_,Name,Chars,_) | T])] : get(word(_,recv(_,_,Name,Chars,_),Text)) ::=
                [$comment on column $, txt(Doc), $.$, txt(Name), $ is '$, txt(Text), $';$, nl,
                 db_comment(T)
                ].


        % Констрайнты для справочников и для оперативных таблиц.
[recv(Doc,k,_,_,_)] ??
        [db_constr_primary(Doc,RecvList)] ::=
                [$,constraint $, txt(Doc), $_primary_key primary key $,
                 db_nsi2($($,RecvList), $)$
                ].
        [db_constr_primary(_,_)] ::= [].

        [db_constr_null(k)] ::= [$ not null $].
        [db_constr_null(_)] ::= [].

        [db_constr_default(k)] ::= [].
        [db_constr_default(_)] ::= [$ default 0 $].


        % Секвенсы для ключей справочников (если есть числовые).
[recv(Doc,k,_,digit(Len,_),_)] ??
        [db_seq_nsi(Doc)] ::=
                [$create sequence $, txt(Doc), $_seq maxvalue $, db_seq_nsi1(Len), $;$, nl].
        [db_seq_nsi(_)] ::= [].

        [db_seq_nsi1(0)] ::= [].
[NewVal is Val - 1] ??
        [db_seq_nsi1(Val)] ::= [$9$, db_seq_nsi1(NewVal)].


%
%       Генерация описателей оперативных документов.
%

        % Правила генерации описателей оперативных таблиц.
        [db_oper([])] ::= [].
        [db_oper([doc(Doc,Caption,oper) | T])] : bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList) ::=
               [$create table $, txt(Doc),
                $(primary_$, txt(Doc), $ number(15) primary key$, nl,
                db_hierarchy(Doc),
                db_oper1($,$,RecvList),
                db_constr_unique(Doc,RecvList),
                db_constr_hierarchy(Doc),
                db_constr_foreign(Doc,RecvList), $);$, nl, nl,
                $comment on table $, txt(Doc), $ is '$, txt(Caption), $';$, nl,
                db_comment(RecvList), nl,
                db_oper(T)
               ].
        [db_oper([_ | T])] ::= [db_oper(T)].


        % Описание наследуемых из старших документов ключей.
[under(Parent,Doc), doc(Parent,_,oper)] ??
        [db_hierarchy(Doc)] : bagof(under(ForParent),under(ForParent,Doc),ParentList) ::=
                [db_hierarchy1(ParentList)].
        [db_hierarchy(_)] ::= [].

        [db_hierarchy1([])] ::= [].
        [db_hierarchy1([under(Parent) | T])] ::=
                [$,primary_$, txt(Parent), $ number(15) not null$, nl,
                 db_hierarchy1(T)
                ].


        % Описание полей таблицы.
        [db_oper1(_,[])] ::= [].
        [db_oper1(Symbol,[recv(_,_,$LEVEL$,_,_) | T])] ::= [db_oper1(Symbol,T)].
        [db_oper1(Symbol,[recv(Doc,Type,Name,char(Len,_),_) | T])] ::=
                [txt(Symbol), txt(Name), $ varchar2($, Len, $)$, db_constr_null(Type), nl,
                 db_oper1($,$,T)
                ].
        [db_oper1(Symbol,[recv(Doc,Type,Name,digit(Len,0),_) | T])] ::=
                [txt(Symbol), txt(Name), $ number($, Len, $)$, db_constr_null(Type), db_constr_default(Type), nl,
                 db_oper1($,$,T)
                ].
        [db_oper1(Symbol,[recv(Doc,Type,Name,digit(Len,Dec),_) | T])] ::=
                [txt(Symbol), txt(Name), $ number($, Len, $,$, Dec, $)$, db_constr_null(Type), db_constr_default(Type), nl,
                 db_oper1($,$,T)
                ].
        [db_oper1(Symbol,[recv(Doc,Type,Name,date,_) | T])] ::=
                [txt(Symbol), txt(Name), $ date$, db_constr_null(Type), nl,
                 db_oper1($,$,T)
                ].
        [db_oper1(Symbol,[recv(Doc,Type,Name,time,_) | T])] ::=
                [txt(Symbol), txt(Name), $ timestamp$, db_constr_null(Type), nl,
                 db_oper1($,$,T)
                ].
        [db_oper1(Symbol,[recv(Doc,Type,Name,boolean,_) | T])] ::=
                [txt(Symbol), txt(Name), $ integer$, db_constr_null(Type), $ default 0 $, nl,
                 db_oper1($,$,T)
                ].


        % Описание уникального набора значений (в качестве ключа)
[recv(Doc,k,_,_,none)] ??
        [db_constr_unique(Doc,RecvList)] ::=
                [$,constraint $, txt(Doc), $_uniques unique$,
                 db_constr_unique1($($,RecvList), $)$, nl
                ].
        [db_constr_unique(_,_)] ::= [].

        [db_constr_unique1(_,[])] ::= [].
        [db_constr_unique1(Symbol,[recv(_,_,$LEVEL$,_,_) | T])] ::= [db_constr_unique1(Symbol,T)].
        [db_constr_unique1(Symbol,[recv(_,k,Name,_,none) | T])] ::=
                [txt(Symbol), txt(Name),
                 db_constr_unique1($,$,T)
                ].
        [db_constr_unique1(Symbol,[_ | T])] ::=
                [db_constr_unique1(Symbol,T)].


        % Описания внешних ключей для оперативных документов.
[under(Parent,Doc), doc(Parent,_,oper)] ??
        [db_constr_hierarchy(Doc)] : bagof(under(ForParent),under(ForParent,Doc),ParentList) ::=
                [db_constr_hierarchy(Doc,ParentList)].
        [db_constr_hierarchy(_)] ::= [].

        [db_constr_hierarchy(_,[])] ::= [].
        [db_constr_hierarchy(Doc,[under(Parent) | T])] ::=
                [$,constraint $, txt(Doc), $_Foreign_$, txt(Parent), $ foreign key (primary_$,
                 txt(Parent), $) references $, txt(Parent), $(primary_$, txt(Parent), $)$, nl,
                 db_constr_hierarchy(Doc,T)
                ].

        % Описания внешних ключей для справочников.
[recv(Doc,_,_,_,from(_,nsi,_))] ??
        [db_constr_foreign(Doc,RecvList)] ::=
                [db_constr_foreign1(Doc,RecvList)].
        [db_constr_foreign(_,_)] ::= [].


        [db_constr_foreign1(_,[])] ::= [].
[recv(Parent,k,Name,_,_)] ??
        [db_constr_foreign1(Doc,[recv(Doc,_,Name,_,from(Parent,nsi,_)) | T])] ::=
                [$,constraint $, txt(Doc), $_Foreign_NSI_$, txt(Parent), $ foreign key ($,
                 txt(Name), $) references $, txt(Parent), $($, txt(Name), $)$, nl,
                 db_constr_foreign1(Doc,T)
                ].
        [db_constr_foreign1(Doc,[_ | T])] ::= [db_constr_foreign1(Doc,T)].


%
%       Генерация описателей выходных форм.
%

        [db_task([])] ::= [].
[under_f(_,Doc)] ??
        [db_task([doc(Doc,Caption,form) | T])] ::=
                [db_task_oper(Doc,Caption), db_task(T)].
        [db_task([doc(Doc,Caption,form) | T])] ::=
                [db_task_result(Doc,Caption), db_task(T)].
        [db_task([_ | T])] ::= [db_task(T)].


        % Генерация оперативных документов.
        [db_task_oper(Doc,Caption)] : bagof(recv(Doc,Type,RecvName,Chars,From),recv(Doc,Type,RecvName,Chars,From),RecvList) ::=
                [$create view $, txt(Doc), nl,
                 db_task_oper1($($,RecvList),
                 db_task_oper2($) as select $,RecvList),
                 db_task_oper3($from $,RecvList,[]), nl,
                 db_task_oper4($where $,Doc), $;$, nl,
                 $comment on table $, txt(Doc), $ is '$, txt(Caption), $';$, nl
                ].

        % Генерация списка полей виртуальной таблицы (с защитой от многократных объявлений).
        [db_task_oper1(_,[])] ::= [].
        [db_task_oper1(Symbol,[recv(Form,_,Name,_,from(Doc,FromType,RecvName)) | T])] : bagof(recv(Type,Chars,from(FromDoc,FromType,FromName)),recv(Form,Type,Name,Chars,from(FromDoc,FromType,FromName)),RecvList) ::=
                [db_task_oper1(Symbol,Doc,Name,RecvList,T)].
        [db_task_oper1(Symbol,Doc,Name,[recv(_,_,from(Doc,_,_)) | _],T)] ::=
                [txt(Symbol), txt(Name), nl, db_task_oper1($,$,T)].
        [db_task_oper1(Symbol,_,_,_,T)] ::= [db_task_oper1(Symbol,T)].


        % Генерация списка полей реальных таблиц (с защитой от многократных объявлений).
        [db_task_oper2(_,[])] ::= [].
        [db_task_oper2(Symbol,[recv(Form,_,Name,_,from(Doc,FromType,RecvName)) | T])] : bagof(recv(Type,Chars,from(FromDoc,FromType,FromName)),recv(Form,Type,Name,Chars,from(FromDoc,FromType,FromName)),RecvList) ::=
                [db_task_oper2(Symbol,Doc,Name,RecvList,T)].
        [db_task_oper2(Symbol,Doc,Name,[recv(_,_,from(Doc,_,_)) | _],T)] ::=
                [txt(Symbol), txt(Doc), $.$, txt(Name), nl, db_task_oper2($,$,T)].
        [db_task_oper2(Symbol,_,_,_,T)] ::= [db_task_oper2(Symbol,T)].


        % Генерация списка таблиц, участвующих в сцеплении (с защитой от повторов).
        [db_task_oper3(_,[],_)] ::= [].
[in_list(Doc,List)] ??
        [db_task_oper3(Symbol,[recv(_,_,_,_,from(Doc,_,_)) | T],List)] ::=
                [db_task_oper3(Symbol,T,List)].
        [db_task_oper3(Symbol,[recv(_,_,_,_,from(Doc,_,_)) | T],List)] ::=
                [txt(Symbol), txt(Doc), db_task_oper3($,$,T,[Doc | List])].


        % Генерация способа стыковки таблиц между собой.
[link(Doc,_,_,_)] ??
        [db_task_oper4(Symbol,Doc)] : bagof(link(Doc1,Doc2,List),link(Doc,Doc1,Doc2,List),LinkList) ::=
                [db_task_oper4(Symbol,Doc,LinkList)].
        [db_task_oper4(_,_)] ::= [].

        [db_task_oper4(_,_,[])] ::= [].
[doc(Doc1,_,oper), doc(Doc2,_,oper), under(Doc1,Doc2)] ??
        [db_task_oper4(Symbol,Doc,[link(Doc1,Doc2,_) | T])] ::=
                [txt(Symbol), txt(Doc1), $.primary_$, txt(Doc1), $ = $,
                 txt(Doc2), $.primary_$, txt(Doc1), nl,
                 db_task_oper4($  and $,Doc,T)
                ].
[doc(Doc1,_,oper), doc(Doc2,_,oper), under(Doc2,Doc1)] ??
        [db_task_oper4(Symbol,Doc,[link(Doc1,Doc2,_) | T])] ::=
                [txt(Symbol), txt(Doc2), $.primary_$, txt(Doc2), $ = $,
                 txt(Doc1), $.primary_$, txt(Doc2), nl,
                 db_task_oper4($ and $,Doc,T)
                ].
        [db_task_oper4(Symbol,Doc,[link(Doc1,Doc2,[]) | T])] ::=
                [db_task_oper4(Symbol,Doc,T)].
        [db_task_oper4(Symbol,Doc,[link(Doc1,Doc2,[recv(_,_,Name,_,_) | T1]) | T2])] ::=
                [txt(Symbol), txt(Doc1), $.$, txt(Name), $ = $,
                 txt(Doc2), $.$, txt(Name), nl,
                 db_task_oper4($ and $,Doc,[link(Doc1,Doc2,T1) | T2])
                ].


        % Генерация выходных документов.
        [db_task_result(Doc,Caption)] : bagof(recv(Doc,Type,RecvName,Chars,From),recv(Doc,Type,RecvName,Chars,From),RecvList) ::=
                [$create view $, txt(Doc), nl,
                 db_task_oper1($($,RecvList),
                 db_task_oper2($) as select $,RecvList),
                 db_task_oper3($from $,RecvList,[]), nl,
                 db_task_oper4($where $,Doc), $;$, nl,
                 $comment on table $, txt(Doc), $ is '$, txt(Caption), $';$, nl
                ].

%
%       Генерация интерфейса пакета для системы.
%

        [db_package(System)] ::=
                [nl,
                 $create or replace package $, txt(System), $_pack is$, nl,
                 algo(init_pack),
                 $procedure prepare_H_PARM; -- Подготовка H_PARM к работе.$, nl,
                 algo(proc_pack),
                 db_package_procs(System),
                 algo(term_pack),
                 $end;$, nl,
                 $/$, nl,
                 $;$, nl, nl
                ].

        % Генерация процедур вставки/изменения/удаления для каждого документа.
        [db_package_procs(System)] : bagof(doc(Doc,Type,Caption),doc(Doc,Type,Caption),DocList) ::=
                [db_package_procs(System,DocList)].

        [db_package_procs(_,[])] ::= [].
        [db_package_procs(System,[doc(Doc,_,oper) | T])] : bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList) ::=
                [$function insert_into_$, txt(Doc), db_package_procs($($,Doc,RecvList), $) return number;$, nl,
                 $function update_table_$, txt(Doc), db_package_procs($(in_record in number,$,Doc,RecvList), $) return integer;$, nl,
                 $function delete_from_$, txt(Doc), $(in_record in number) return integer;$, nl, nl,
                 db_package_procs(System,T)
                ].
        [db_package_procs(System,[doc(Doc,_,nsi) | T])] : bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList) ::=
                [$function insert_into_$, txt(Doc), db_package_procs($($,Doc,RecvList), $) return number;$, nl,
                 $function update_table_$, txt(Doc), db_package_procs($($,Doc,RecvList), $) return integer;$, nl,
                 $function delete_from_$, txt(Doc), db_package_procs_parm($($,Doc,RecvList), $) return integer;$, nl, nl,
                 db_package_procs(System,T)
                ].
        [db_package_procs(System,[_ | T])] ::= [db_package_procs(System,T)].

        [db_package_procs(_,_,[])] ::= [].
        [db_package_procs(Symbol,Doc,[recv(Doc,_,Name,char(_,_),_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in varchar2$, db_package_procs($,$,Doc,T)].
        [db_package_procs(Symbol,Doc,[recv(Doc,_,Name,digit(_,_),_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in number$, db_package_procs($,$,Doc,T)].
        [db_package_procs(Symbol,Doc,[recv(Doc,_,Name,date,_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in date$, db_package_procs($,$,Doc,T)].
        [db_package_procs(Symbol,Doc,[recv(Doc,_,Name,time,_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in timestamp$, db_package_procs($,$,Doc,T)].
        [db_package_procs(Symbol,Doc,[recv(Doc,_,Name,boolean,_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in integer$, db_package_procs($,$,Doc,T)].
        [db_package_procs(Symbol,Doc,[X | T])] ::=
                [txt(Symbol), txt(X), db_package_procs($,$,Doc,T)].

        [db_package_procs_parm(_,_,[])] ::= [].
        [db_package_procs_parm(Symbol,Doc,[recv(_,_,$LEVEL$,_,_) | T])] ::=
                [db_package_procs_parm(Symbol,Doc,T)].
        [db_package_procs_parm(Symbol,Doc,[recv(Doc,k,Name,char(_,_),_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in varchar2$, db_package_procs_parm($,$,Doc,T)].
        [db_package_procs_parm(Symbol,Doc,[recv(Doc,k,Name,digit(_,_),_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in number$, db_package_procs_parm($,$,Doc,T)].
        [db_package_procs_parm(Symbol,Doc,[recv(Doc,k,Name,date,_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in date$, db_package_procs_parm($,$,Doc,T)].
        [db_package_procs_parm(Symbol,Doc,[recv(Doc,k,Name,time,_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in timestamp$, db_package_procs_parm($,$,Doc,T)].
        [db_package_procs_parm(Symbol,Doc,[recv(Doc,k,Name,boolean,_) | T])] ::=
                [txt(Symbol), $p_$, txt(Name), $ in integer$, db_package_procs_parm($,$,Doc,T)].
        [db_package_procs_parm(Symbol,Doc,[_ | T])] ::=
                [db_package_procs_parm(Symbol,Doc,T)].


%
%       Генерация триггеров для системы.
%

        [db_triggers(System)] : bagof(doc(Doc,Caption,Type),doc(Doc,Caption,Type),DocList) ::=
                [algo(init_trig(add)),  db_insert_triggers(System,DocList),     algo(term_trig(add)),
                 algo(init_trig(rep)),  db_update_triggers(System,DocList),     algo(term_trig(rep)),
                 algo(init_trig(del)),  db_delete_triggers(System,DocList),     algo(term_trig(del))
                ].

        % Построение триггера на вставку записей.
        [db_insert_triggers(_,[])] ::= [].
        [db_insert_triggers(System,[doc(Doc,Caption,oper) | T])] ::=
                [$create trigger insert_$, txt(Doc), $ before insert on $, txt(Doc), nl,
                 $  for each row$, nl,
                 $declare   -- $, txt(Caption), nl,
                 $  empty_decl  number; -- Для избежания ошибок.$, nl,
                 algo(define_trig(add),Doc),
                 $begin$, nl,
                 $  empty_decl := 0;$, nl,
                 algo(start_trig(add),Doc),
                 algo(ins_trig,Doc),
                 algo(end_trig(add),Doc),
                 $end;$, nl,
                 $/$, nl, nl,
                 db_insert_triggers(System,T)
                ].
        [db_insert_triggers(System,[doc(Doc,Caption,nsi) | T])] ::=
                [$create trigger insert_$, txt(Doc), $ before insert on $, txt(Doc), nl,
                 $  for each row$, nl,
                 $declare   -- $, txt(Caption), nl,
                 $  empty_decl  number; -- Для избежания ошибок.$, nl,
                 algo(define_trig(add),Doc),
                 $begin$, nl,
                 $  empty_decl := 0;$, nl,
                 algo(start_trig(add),Doc),
                 algo(ins_trig,Doc),
                 algo(end_trig(add),Doc),
                 $end;$, nl,
                 $/$, nl, nl,
                 db_insert_triggers(System,T)
                ].
        [db_insert_triggers(System,[_ |T])] ::= [db_insert_triggers(System,T)].


        % Построение триггера на изменение записей.
        [db_update_triggers(_,[])] ::= [].
        [db_update_triggers(System,[doc(Doc,Caption,oper) | T])] ::=
                [$create trigger update_$, txt(Doc), $ before update on $, txt(Doc), nl,
                 $  for each row$, nl,
                 $declare   -- $, txt(Caption), nl,
                 $  empty_decl  number; -- Для избежания ошибок.$, nl,
                 algo(define_trig(rep),Doc),
                 $begin$, nl,
                 $  empty_decl := 0;$, nl,
                 algo(start_trig(rep),Doc),
                 algo(rep_trig,Doc),
                 algo(end_trig(rep),Doc),
                 $end;$, nl,
                 $/$, nl, nl,
                 db_update_triggers(System,T)
                ].
        [db_update_triggers(System,[doc(Doc,Caption,nsi) | T])] ::=
                [$create trigger update_$, txt(Doc), $ before update on $, txt(Doc), nl,
                 $  for each row$, nl,
                 $declare   -- $, txt(Caption), nl,
                 $  empty_decl  number; -- Для избежания ошибок.$, nl,
                 algo(define_trig(rep),Doc),
                 $begin$, nl,
                 $  empty_decl := 0;$, nl,
                 algo(start_trig(rep),Doc),
                 algo(rep_trig,Doc),
                 algo(end_trig(rep),Doc),
                 $end;$, nl,
                 $/$, nl, nl,
                 db_update_triggers(System,T)
                ].
        [db_update_triggers(System,[_ |T])] ::= [db_update_triggers(System,T)].


        % Построение триггера на удаление записей.
        [db_delete_triggers(_,[])] ::= [].
        [db_delete_triggers(System,[doc(Doc,Caption,oper) | T])] ::=
                [$create trigger delete_$, txt(Doc), $ before delete on $, txt(Doc), nl,
                 $  for each row$, nl,
                 $declare   -- $, txt(Caption), nl,
                 $  empty_decl  number; -- Для избежания ошибок.$, nl,
                 algo(define_trig(del),Doc),
                 $begin$, nl,
                 $  empty_decl := 0;$, nl,
                 algo(start_trig(del),Doc),
                 algo(del_trig,Doc),
                 algo(end_trig(del),Doc),
                 $end;$, nl,
                 $/$, nl, nl,
                 db_delete_triggers(System,T)
                ].
        [db_delete_triggers(System,[doc(Doc,Caption,nsi) | T])] ::=
                [$create trigger delete_$, txt(Doc), $ before delete on $, txt(Doc), nl,
                 $  for each row$, nl,
                 $declare   -- $, txt(Caption), nl,
                 $  empty_decl  number; -- Для избежания ошибок.$, nl,
                 algo(define_trig(del),Doc),
                 $begin$, nl,
                 $  empty_decl := 0;$, nl,
                 algo(start_trig(del),Doc),
                 algo(del_trig,Doc),
                 algo(end_trig(del),Doc),
                 $end;$, nl,
                 $/$, nl, nl,
                 db_delete_triggers(System,T)
                ].
        [db_delete_triggers(System,[_ |T])] ::= [db_delete_triggers(System,T)].


%
%       Генерация тела пакета для системы.
%


        [db_package_body(System)] : get(recv($H_PARM$,k,RName,_,_)) ::=
                [nl,
                 $create or replace package body $, txt(System), $_pack is$, nl,
                 algo(init_pack_body),
                 $procedure prepare_H_PARM is -- Подготовка справочника к работе.$, nl,
                 $  parm_count          number;$, nl,
                 $begin$, nl,
                 $  select count(*) into parm_count from H_PARM;$, nl,
                 $  if parm_count = 0 then$, nl,
                 $    insert into H_PARM($, txt(RName), $) values ('');$, nl,
                 $  end if;$, nl,
                 $end;$, nl, nl,
                 algo(proc_pack_body),
                 db_package_body_procs(System),
                 algo(term_pack_body),
                 $end;$, nl,
                 $/$, nl,
                 $;$, nl, nl
                ].

        % Генерация процедур вставки/изменения/удаления для каждого документа.
        [db_package_body_procs(System)] : bagof(doc(Doc,Type,Caption),doc(Doc,Type,Caption),DocList) ::=
                [db_package_body_procs(System,DocList)].

        [db_package_body_procs(_,[])] ::= [].
        [db_package_body_procs(System,[doc(Doc,_,oper) | T])] : bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList) ::=
                [$function insert_into_$, txt(Doc), db_package_procs($($,Doc,RecvList), $) return number is$, nl,
                 $begin$, nl,
                 $  insert into $, txt(Doc), $(primary_$, txt(Doc), db_package_insert($,$,$$,RecvList), $) values($, txt(System), $_seq.nextval$, db_package_insert($,$,$p_$,RecvList), $);$, nl,
                 $  return 0;$, nl,
                 $end;$, nl, nl,
                 $function update_table_$, txt(Doc), db_package_procs($(in_record in number,$,Doc,RecvList), $) return integer is$, nl,
                 $begin$, nl,
                 $  update $, txt(Doc), db_package_replace($ set $,RecvList), $ where primary_$, txt(Doc), $ = in_record;$, nl,
                 $  return 0;$, nl,
                 $end;$, nl, nl,
                 $function delete_from_$, txt(Doc), $(in_record in number) return integer is$, nl,
                 $begin$, nl,
                 $  delete from $, txt(Doc), $ where primary_$, txt(Doc), $ = in_record;$, nl,
                 $  return 0;$, nl,
                 $end;$, nl, nl,
                 db_package_body_procs(System,T)
                ].
        [db_package_body_procs(System,[doc(Doc,_,nsi) | T])] : bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList) ::=
                [$function insert_into_$, txt(Doc), db_package_procs($($,Doc,RecvList), $) return number is$, nl,
                 $begin$, nl,
                 $  insert into $, txt(Doc), db_package_insert($($,$$,RecvList), $) values($, db_package_insert($$,$p_$,RecvList), $);$, nl,
                 $  return 0;$, nl,
                 $end;$, nl, nl,
                 $function update_table_$, txt(Doc), db_package_procs($($,Doc,RecvList), $) return integer is$, nl,
                 $begin$, nl,
                 $  update $, txt(Doc), db_package_replace($ set $,RecvList), db_package_replace_nsi($ where $,RecvList), $;$, nl,
                 $  return 0;$, nl,
                 $end;$, nl, nl,
                 $function delete_from_$, txt(Doc), db_package_procs_parm($($,Doc,RecvList), $) return integer is$, nl,
                 $begin$, nl,
                 $  delete from $, txt(Doc), db_package_delete_nsi($ where $,RecvList), $;$, nl,
                 $  return 0;$, nl,
                 $end;$, nl, nl,
                 db_package_body_procs(System,T)
                ].
        [db_package_body_procs(System,[_ | T])] ::= [db_package_body_procs(System,T)].


        [db_package_insert(_,_,[])] ::= [].
        [db_package_insert(Sign,Symbol,[recv(_,_,$LEVEL$,_,_) | T])] ::=
                [db_package_insert(Sign,Symbol,T)].
        [db_package_insert(Sign,Symbol,[recv(_,_,Name,_,_) | T])] ::=
                [txt(Sign), txt(Symbol), txt(Name), db_package_insert($,$,Symbol,T)].

        [db_package_replace(_,[])] ::= [].
        [db_package_replace(Symbol,[recv(_,_,$LEVEL$,_,_) | T])] ::=
                [db_package_replace(Symbol,T)].
        [db_package_replace(Symbol,[recv(_,_,Name,_,_) | T])] ::=
                [txt(Symbol), txt(Name), $ = p_$, txt(Name), db_package_replace($,$,T)].

        [db_package_replace_nsi(_,[])] ::= [].
        [db_package_replace_nsi(Symbol,[recv(_,_,$LEVEL$,_,_) | T])] ::=
                [db_package_replace_nsi(Symbol,T)].
        [db_package_replace_nsi(Symbol,[recv(_,k,Name,_,_) | T])] ::=
                [txt(Symbol), txt(Name), $ = p_$, txt(Name), db_package_replace_nsi($ and $,T)].
        [db_package_replace_nsi(Symbol,[_ | T])] ::=
                [db_package_replace_nsi(Symbol,T)].

        [db_package_delete_nsi(_,[])] ::= [].
        [db_package_delete_nsi(Symbol,[recv(_,_,$LEVEL$,_,_) | T])] ::=
                [db_package_delete_nsi(Symbol,T)].
        [db_package_delete_nsi(Symbol,[recv(_,k,Name,_,_) | T])] ::=
                [txt(Symbol), txt(Name), $ = p_$, txt(Name), db_package_delete_nsi($ and $,T)].
        [db_package_delete_nsi(Symbol,[_ | T])] ::=
                [db_package_delete_nsi(Symbol,T)].


%
%       Генерация таблицы ролей для системы.
%

        % Поочередная отработка задач.
        [roles(System)] : bagof(arm(Name,Caption),arm(Name,Caption),ArmList) ::=
                [roles(System,ArmList),
                 roles_table(System,ArmList),
                 roles_table_data(System,ArmList)
                ].

        % Отработка каждой роли АРМа.
        [roles(_,[])] ::= [].
        [roles(System,[arm(Name,_) | T])] : [bagof(access(Doc,DocMode),access(Name,Doc,DocMode),DocList), bagof(access(Task),access(Name,Task),TaskList)] ::=
                [$create role $, txt(System), $_$, txt(Name), $ not identified;$, nl,
                 $grant connect to $, txt(System), $_$, txt(Name), $;$, nl,
                 $grant execute on package $, txt(System), $.$, txt(System), $_pack to $, txt(System), $_$, txt(Name), $;$, nl,
                 roles_for_idus(System,Name,DocList),
                 roles_for_t(System,Name,TaskList),
                 roles(System,T)
                ].

        % Индивидуальное выставление доступов.
        [roles_for_idus(_,_,[])] ::= [].
        [roles_for_idus(System,Name,[access(Doc,Modes) | T])] ::=
                [roles_for_i(System,Name,Doc,Modes),
                 roles_for_d(System,Name,Doc,Modes),
                 roles_for_u(System,Name,Doc,Modes),
                 roles_for_s(System,Name,Doc,Modes),
                 roles_for_idus(System,Name,T)
                ].
[in_list(sel,Modes)] ??
        [roles_for_s(System,Name,Doc,Modes)] ::=
                [$grant select on $, txt(Doc), $ to $, txt(System), $_$, txt(Name), $;$, nl].
        [roles_for_s(System,Name,Doc,Modes)] ::= [].
[in_list(del,Modes)] ??
        [roles_for_d(System,Name,Doc,Modes)] ::=
                [$grant delete on $, txt(Doc), $ to $, txt(System), $_$, txt(Name), $;$, nl].
        [roles_for_d(System,Name,Doc,Modes)] ::= [].
[in_list(rep,Modes)] ??
        [roles_for_u(System,Name,Doc,Modes)] ::=
                [$grant update on $, txt(Doc), $ to $, txt(System), $_$, txt(Name), $;$, nl].
        [roles_for_u(System,Name,Doc,Modes)] ::= [].
[in_list(add,Modes)] ??
        [roles_for_i(System,Name,Doc,Modes)] ::=
                [$grant insert on $, txt(Doc), $ to $, txt(System), $_$, txt(Name), $;$, nl].
        [roles_for_i(System,Name,Doc,Modes)] ::= [].
        [roles_for_t(_,_,[])] ::= [].
        [roles_for_t(System,Name,[access(Task) | T])] ::=
                [$grant select on $, txt(Task), $ to $, txt(System), $_$, txt(Name), $;$, nl,
                 roles_for_t(System,Name,T)
                ].


