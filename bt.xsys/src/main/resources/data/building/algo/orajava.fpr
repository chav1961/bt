% ---------------------------------------------------------------------------- :
%                                                                              :
%       Система автоматизированного проектирования программного обеспечения    :
% для различных систем программирования с ЕЯИ-вводом.      (GSERV205)          :
%                                                                              :
%       Правила генерации алгоритмов в системе Java/ORACLE9i                   :
%                                                                              :
%       (с) 2003г, А.В.Черномырдин, 35-24-65 аб 1326.                          :
%       Версия 1.00 от 01.03.2003.                                             :
%                                                                              :
% ---------------------------------------------------------------------------- :

% ---------------------------------------------------------------------------- :
%                                                                              :
%       Общая схема генерации программ алгоритмов.                             :
%                                                                              :
% ---------------------------------------------------------------------------- :


generate.

%
%       Генерация аглоритма трассировки системы.
%

        % Инициализация алгоритма протоколирования.
        [algo_protocol(init)] ::=
                [$create table spy_list$, nl,
                 $(SPL_WHEN timestamp not null$, nl,
                 $,SPL_WHO1 varchar(20) not null$, nl,
                 $,SPL_WHO2 varchar(20) not null$, nl,
                 $,SPL_LEVEL integer not null$, nl,
                 $,SPL_OPER char(1) not null check(SPL_OPER in ('i', 'u', 'd'))$, nl,
                 $,SPL_TABLE varchar2(20) not null$, nl,
                 $,SPL_ID varchar2(100) not null$, nl,
                 $,SPL_FIELD varchar2(20)$, nl,
                 $,SPL_OLD varchar2(2000)$, nl,
                 $,SPL_NEW varchar2(2000)); $, nl, nl,
                 $create index spy_list1 on spy_list(SPL_WHO1, SPL_TABLE, SPL_OPER, SPL_WHEN desc);$, nl,
                 $create index spy_list2 on spy_list(SPL_WHO2, SPL_TABLE, SPL_OPER, SPL_WHEN desc);$, nl,
                 $create index spy_list3 on spy_list(SPL_WHEN, SPL_TABLE, SPL_OPER);$, nl, nl,
                 $comment on table spy_list is 'Таблица истории';$, nl, nl,
                 $create trigger insert_spy_list before insert on spy_list for each row$, nl,
                 $begin$, nl,
                 $  :new.SPL_WHEN := sysdate;$, nl,
                 $end;$, nl,
                 $/$, nl, nl
                ].


        [algo_protocol(proc_pack)] ::=
                [$function get_trace_level(table_name in varchar) return integer;$, nl, nl,
                 $procedure insert_trace(trace_level in integer,table_name in varchar2,oper in char,id in varchar2,field_name in varchar2,old_val in varchar2,new_val in varchar);$, nl, nl
                ].


        [algo_protocol(proc_pack_body)] ::=
                [$function get_trace_level(table_name in varchar) return integer is$, nl,
                 $begin -- Определение уровня глубины трассировки.$, nl,
                 $  return package_trace_level;$, nl,
                 $end;$, nl, nl,
                 $procedure insert_trace(trace_level in integer,table_name in varchar2,oper in char,id in varchar2,field_name in varchar2,old_val in varchar2,new_val in varchar) is$, nl,
                 $begin -- Фиксация трассировки.$, nl,
                 $  insert into spy_list(SPL_LEVEL,SPL_OPER,SPL_TABLE,SPL_ID,SPL_FIELD,SPL_OLD,SPL_NEW) values (trace_level,oper,table_name,id,field_name,old_val,new_val);$, nl,
                 $end;$, nl, nl
                ].


        % Отработка триггеров вставки.
        [algo_protocol(ins_trig,Doc)] : [bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList), get(system(System,_))] ::=
                [$  if $, txt(System), $_pack.get_trace_level('$, txt(Doc), $') = 2 then -- Полная трассировка.$, nl,
                 algo_protocol(ins_trig,full,Doc,RecvList),
                 $  elsif $, txt(System), $_pack.get_trace_level('$, txt(Doc), $') = 1 then -- Короткая трассировка.$, nl,
                 $    $, txt(System), $_pack.insert_trace(1,'i','$, txt(Doc), $',$, algo_protocol(ins_trig,primary,Doc), $,null,null,null);$, nl,
                 $  end if;$, nl, nl
                ].

        [algo_protocol(ins_trig,full,_,[])] ::= [].
        [algo_protocol(ins_trig,full,Doc,[recv(Doc,_,Name,_,_) | T])] : get(system(System,_)) ::=
                [$    $, txt(System), $_pack.insert_trace(2,'i','$, txt(Doc), $',$, algo_protocol(ins_trig,primary,Doc),$,'$, txt(Name), $',null,:new.$, txt(Name), $);$, nl,
                 algo_protocol(ins_trig,full,Doc,T)
                ].

[doc(Doc,_,oper)] ??
        [algo_protocol(ins_trig,primary,Doc)] ::=
                [$:new.primary_$, txt(Doc)].
        [algo_protocol(ins_trig,primary,Doc)] : bagof(recv(Name,Chars,From),recv(Doc,k,Name,Chars,From),RecvList) ::=
                [algo_protocol(ins_trig,primary,Doc,RecvList,$$)].

        [algo_protocol(ins_trig,primary,_,[],_)] ::= [].
        [algo_protocol(ins_trig,primary,Doc,[recv($LEVEL$,_,_) | T],Symbol)] ::= [algo_protocol(ins_trig,primary,Doc,T,Symbol)].
        [algo_protocol(ins_trig,primary,Doc,[recv(Name,char(_,_),_) | T],Symbol)] ::=
                [txt(Symbol), $:new.$, txt(Name), algo_protocol(ins_trig,primary,Doc,T,$||$)].
        [algo_protocol(ins_trig,primary,Doc,[recv(Name,_,_) | T],Symbol)] ::=
                [txt(Symbol), $to_char(:new.$, txt(Name), $)$, algo_protocol(ins_trig,primary,Doc,T,$||$)].


        % Отработка триггеров изменения.
        [algo_protocol(rep_trig,Doc)] : [bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList), get(system(System,_))] ::=
                [$  if $, txt(System), $_pack.get_trace_level('$, txt(Doc), $') in (1, 2) then -- Полная трассировка.$, nl,
                 algo_protocol(rep_trig,full,Doc,RecvList),
                 $  end if;$, nl, nl
                ].

        [algo_protocol(rep_trig,full,_,[])] ::= [].
        [algo_protocol(rep_trig,full,Doc,[recv(Doc,_,Name,_,_) | T])] : get(system(System,_)) ::=
                [$    $, txt(System), $_pack.insert_trace(1,'r','$, txt(Doc), $',$, algo_protocol(rep_trig,primary,Doc),$,'$, txt(Name), $',:old.$, txt(Name), $,:new.$, txt(Name), $);$, nl,
                 algo_protocol(rep_trig,full,Doc,T)
                ].

[doc(Doc,_,oper)] ??
        [algo_protocol(rep_trig,primary,Doc)] ::=
                [$:old.primary_$, txt(Doc)].
        [algo_protocol(rep_trig,primary,Doc)] : bagof(recv(Name,Chars,From),recv(Doc,k,Name,Chars,From),RecvList) ::=
                [algo_protocol(rep_trig,primary,Doc,RecvList,$$)].

        [algo_protocol(rep_trig,primary,_,[],_)] ::= [].
        [algo_protocol(rep_trig,primary,Doc,[recv($LEVEL$,_,_) | T],Symbol)] ::= [algo_protocol(rep_trig,primary,Doc,T,Symbol)].
        [algo_protocol(rep_trig,primary,Doc,[recv(Name,char(_,_),_) | T],Symbol)] ::=
                [txt(Symbol), $:old.$, txt(Name), algo_protocol(rep_trig,primary,Doc,T,$||$)].
        [algo_protocol(rep_trig,primary,Doc,[recv(Name,_,_) | T],Symbol)] ::=
                [txt(Symbol), $to_char(:old.$, txt(Name), $)$, algo_protocol(rep_trig,primary,Doc,T,$||$)].


        % Отработка триггеров удаления.
        [algo_protocol(del_trig,Doc)] : [bagof(recv(Doc,Type,Name,Chars,From),recv(Doc,Type,Name,Chars,From),RecvList), get(system(System,_))] ::=
                [$  if $, txt(System), $_pack.get_trace_level('$, txt(Doc), $') = 2 then -- Полная трассировка.$, nl,
                 algo_protocol(del_trig,full,Doc,RecvList),
                 $  elsif $, txt(System), $_pack.get_trace_level('$, txt(Doc), $') = 1 then -- Короткая трассировка.$, nl,
                 $    $, txt(System), $_pack.insert_trace(1,'d','$, txt(Doc), $',$, algo_protocol(del_trig,primary,Doc), $,null,null,null);$, nl,
                 $  end if;$, nl, nl
                ].

        [algo_protocol(del_trig,full,_,[])] ::= [].
        [algo_protocol(del_trig,full,Doc,[recv(Doc,_,Name,_,_) | T])] : get(system(System,_)) ::=
                [$    $, txt(System), $_pack.insert_trace(2,'d','$, txt(Doc), $',$, algo_protocol(del_trig,primary,Doc),$,'$, txt(Name), $',:old.$, txt(Name), $,null);$, nl,
                 algo_protocol(del_trig,full,Doc,T)
                ].

        [algo_protocol(del_trig,primary,Doc)] ::= [algo_protocol(rep_trig,primary,Doc)].



%
%       Генерация алгоритма локальной автонумерации.
%

        [algo_loc_num(define_trig,Doc)] ::=
                [$  for_loc_num         number; -- Алгоритм локальной автонумерации.$, nl].

        [algo_loc_num(ins_trig,Doc)] : bagof(algo(recv(Type,Name,Chars,From)),algo(loc_num,recv(Doc,Type,Name,Chars,From)),AlgoList) ::=
                [algo_loc_num(ins_trig,Doc,AlgoList)].

        [algo_loc_num(ins_trig,_,[])] ::= [].
        [algo_loc_num(ins_trig,Doc,[algo(recv(_,Name,_,_)) | T])] ::=
                [$  if :new.$, txt(Name), $ is null then -- Локальная автонумерация$, nl,
                 $    select max($, txt(Name), $)+1 into for_loc_num from $, txt(Doc), $ where $, algo_loc_num(ins_trig_keys,Doc,Name), $;$, nl,
                 $    :new.$, txt(Name), $ := for_loc_num;$, nl,
                 $  else -- Проверка на отсутствие дублирования этого значения в пределах диапазона.$, nl,
                 $    select count(*) into for_loc_num from $, txt(Doc), $ where $, algo_loc_num(ins_trig_keys,Doc,Name), $;$, nl,
                 $    if for_loc_num > 0 then$, nl,
                 $      null; -- sys.dbms_sys_error.raise_system_error(-20000);$, nl,
                 $    end if;$, nl,
                 $  end if;$, nl, nl,
                 algo_loc_num(ins_trig,Doc,T)
                ].

        [algo_loc_num(ins_trig_keys,Doc,RecvName)] : bagof(recv(Name,Chars,From),recv(Doc,k,Name,Chars,From),RecvList) ::=
                [algo_loc_num(ins_trig_keys,Doc,RecvName,$$,RecvList)].

        [algo_loc_num(ins_trig_keys,_,_,_,[])] ::= [].
        [algo_loc_num(ins_trig_keys,Doc,RecvName,Symbol,[recv(RecvName,_,_) | T])] ::=
                [algo_loc_num(ins_trig_keys,Doc,RecvName,Symbol,T)].
[recv(Doc,k,Name,_,from(_,nsi,_))] ??
        [algo_loc_num(ins_trig_keys,Doc,RecvName,Symbol,[recv(Name,_,_) | T])] ::=
                [algo_loc_num(ins_trig_keys,Doc,RecvName,Symbol,T)].
        [algo_loc_num(ins_trig_keys,Doc,RecvName,Symbol,[recv(Name,_,_) | T])] ::=
                [txt(Symbol), txt(Name), $ = :new.$, txt(Name), algo_loc_num(ins_trig_keys,Doc,RecvName,$ and $,T)].


%
%       Генерация алгоритма текущего датирования.
%

        [algo_cur_date(define_trig,Doc)] ::= [].

        [algo_cur_date(ins_trig,Doc)] : bagof(recv(Type,Name,Chars,From),algo(cur_date,recv(Doc,Type,Name,Chars,From)),RecvList) ::=
                [algo_cur_date(ins_trig,Doc,RecvList)].

        [algo_cur_date(ins_trig,_,[])] ::= [].
        [algo_cur_date(ins_trig,Doc,[recv(_,Name,_,_) | T])] ::=
                [$  if :new.$, txt(Name), $ is null then -- Алгоритм текущего датирования.$, nl,
                 $    :new.$, txt(Name), $ := sysdate;$, nl,
                 $  end if;$, nl, nl,
                 algo_cur_date(ins_trig,Doc,T)
                ].


%
%       Генерация алгоритма пересчета остатков.
%

        % Отработка триггера вставки.
        [algo_r_b(ins_trig,Doc)] : bagof(algo(Recv1,Recv2,Recv3),algo(r_b,use,Recv1,Recv2,Recv3),AlgoList) ::=
                [algo_r_b(ins_trig,Doc,AlgoList)].


        [algo_r_b(ins_trig,_,[])] ::= [].
        [algo_r_b(ins_trig,Doc,[algo(Recv1,Recv2,Recv3) | T])] ::=
                [algo_r_b(ins_trig,null,Doc,Recv1),
                 algo_r_b(ins_trig,plus(Recv1),Doc,Recv2),
                 algo_r_b(ins_trig,minus(Recv1),Doc,Recv3),
                 algo_r_b(ins_trig,Doc,T)
                ].

        [algo_r_b(ins_trig,null,Doc,recv(Doc,_,Name,_,_))] ::=
                [$  :new.$, txt(Name), $ := 0; -- Это поле всегда РАСЧИТЫВАЕТСЯ!$, nl, nl].
        [algo_r_b(ins_trig,plus(recv(RDoc,_,RName,_,_)),Doc,recv(Doc,_,Name,_,_))] ::=
                [$  update $, txt(RDoc), $ set $, txt(RName), $ = $, txt(RName), $+:new.$, txt(Name),
                 $ where $, txt(RDoc), $.primary_$, txt(RDoc), $ = :new.primary_$, txt(RDoc), $; -- Пересчет остатков$,
                 nl, nl
                ].
        [algo_r_b(ins_trig,minus(recv(RDoc,_,RName,_,_)),Doc,recv(Doc,_,Name,_,_))] ::=
                [$  update $, txt(RDoc), $ set $, txt(RName), $ = $, txt(RName), $-:new.$, txt(Name),
                 $ where $, txt(RDoc), $.primary_$, txt(RDoc), $ = :new.primary_$, txt(RDoc), $; -- Пересчет остатков$,
                 nl, nl
                ].
        [algo_r_b(ins_trig,_,_,_)] ::= [].



        % Отработка триггера изменения.
        [algo_r_b(rep_trig,Doc)] : bagof(algo(Recv1,Recv2,Recv3),algo(r_b,use,Recv1,Recv2,Recv3),AlgoList) ::=
                [algo_r_b(rep_trig,Doc,AlgoList)].


        [algo_r_b(rep_trig,_,[])] ::= [].
        [algo_r_b(rep_trig,Doc,[algo(Recv1,Recv2,Recv3) | T])] ::=
                [algo_r_b(rep_trig,plus(Recv1),Doc,Recv2),
                 algo_r_b(rep_trig,minus(Recv1),Doc,Recv3),
                 algo_r_b(rep_trig,Doc,T)
                ].

        [algo_r_b(rep_trig,plus(recv(RDoc,_,RName,_,_)),Doc,recv(Doc,_,Name,_,_))] ::=
                [$  update $, txt(RDoc), $ set $, txt(RName), $ = $, txt(RName), $+:new.$, txt(Name), $-:old.$, txt(Name),
                 $ where $, txt(RDoc), $.primary_$, txt(RDoc), $ = :old.primary_$, txt(RDoc), $; -- Пересчет остатков$,
                 nl, nl
                ].
        [algo_r_b(rep_trig,minus(recv(RDoc,_,RName,_,_)),Doc,recv(Doc,_,Name,_,_))] ::=
                [$  update $, txt(RDoc), $ set $, txt(RName), $ = $, txt(RName), $+:old.$, txt(Name), $-:new.$, txt(Name),
                 $ where $, txt(RDoc), $.primary_$, txt(RDoc), $ = :old.primary_$, txt(RDoc), $; -- Пересчет остатков$,
                 nl, nl
                ].
        [algo_r_b(rep_trig,_,_,_)] ::= [].



        % Отработка триггера удаления.
        [algo_r_b(del_trig,Doc)] : bagof(algo(Recv1,Recv2,Recv3),algo(r_b,use,Recv1,Recv2,Recv3),AlgoList) ::=
                [algo_r_b(del_trig,Doc,AlgoList)].


        [algo_r_b(del_trig,_,[])] ::= [].
        [algo_r_b(del_trig,Doc,[algo(Recv1,Recv2,Recv3) | T])] ::=
                [algo_r_b(del_trig,minus(Recv1),Doc,Recv2),
                 algo_r_b(del_trig,plus(Recv1),Doc,Recv3),
                 algo_r_b(del_trig,Doc,T)
                ].

        [algo_r_b(del_trig,plus(recv(RDoc,_,RName,_,_)),Doc,recv(Doc,_,Name,_,_))] ::=
                [$  update $, txt(RDoc), $ set $, txt(RName), $ = $, txt(RName), $+:old.$, txt(Name),
                 $ where $, txt(RDoc), $.primary_$, txt(RDoc), $ = :old.primary_$, txt(RDoc), $; -- Пересчет остатков$,
                 nl, nl
                ].
        [algo_r_b(del_trig,minus(recv(RDoc,_,RName,_,_)),Doc,recv(Doc,_,Name,_,_))] ::=
                [$  update $, txt(RDoc), $ set $, txt(RName), $ = $, txt(RName), $-:old.$, txt(Name),
                 $ where $, txt(RDoc), $.primary_$, txt(RDoc), $ = :old.primary_$, txt(RDoc), $; -- Пересчет остатков$,
                 nl, nl
                ].
        [algo_r_b(del_trig,_,_,_)] ::= [].


%
%       Генерация алгоритма обработки автомата.
%

        % Отработка триггера вставки.
[algo(automat,Doc,Name,Value,_)] ??
        [algo_automat(ins_trig,Doc)] ::=
                [$  :new.$, txt(Name), $ := $, Value, $; -- Автомат начинаем с первого значения;$, nl, nl].
[algo(automat,ADoc,AName,_,_), under(ADoc,Doc)] ??
        [algo_automat(ins_trig,Doc)] : bagof(Value,algo(automat,ADoc,AName,Value,add_child(Doc)),ValueList) ::=
                [$  select $, txt(AName), $ into empty_decl from $, txt(ADoc), $ where $, txt(ADoc), $.primary_$, txt(ADoc), $ = :new.primary_$, txt(ADoc), $;$, nl,
                 $  if empty_decl not in $, algo_automat(ins_trig_list,$($,ValueList), $) then$, nl,
                 $      null; -- Недопустимая операция (алгоритм автомата).$, nl,
                 $  end if;$, nl, nl
                ].
        [algo_automat(ins_trig,_)] ::= [].

        [algo_automat(ins_trig_list,_,[])] ::= [].
        [algo_automat(ins_trig_list,Symbol,[Value | T])] ::=
                [txt(Symbol), Value, algo_automat(ins_trig_list,$, $,T)].


        % Отработка триггера изменения.
[algo(automat,Doc,Name,_,rep_field(_))] ??
        [algo_automat(rep_trig,Doc)] : bagof(reps(Value,Field),algo(automat,Doc,Name,Value,rep_field(Field)),ValueList) ::=
                [algo_automat(rep_trig_mk_list,ValueList,[],Values),
                 algo_automat(rep_trig_list,Doc,Name,Values,ValueList),
                 nl
                ].
        [algo_automat(rep_trig,_)] ::= [].

        [algo_automat(rep_trig_mk_list,[],List,List)] ::= [].
[in_list(Value,List1)] ??
        [algo_automat(rep_trig_mk_list,[reps(Value,_) | T],List1,List2)] ::=
                [algo_automat(rep_trig_mk_list,T,List1,List2)].
        [algo_automat(rep_trig_mk_list,[reps(Value,_) | T],List1,List2)] ::=
                [algo_automat(rep_trig_mk_list,T,[Value | List1],List2)].

        [algo_automat(rep_trig_list,_,_,[],_)] ::= [].
        [algo_automat(rep_trig_list,Doc,Name,[Value | T],List)] : bagof(recv(RType,RName,RChars,RFrom),recv(Doc,RType,RName,RChars,RFrom),RecvList) ::=
                [$  if :old.$, txt(Name), $ = $, Value, $ and $,
                 algo_automat(rep_trig_list1,$($,Value,RecvList,List),
                 algo_automat(rep_trig_list,Doc,Name,T,List)
                ].

        [algo_automat(rep_trig_list1,$($,_,[],_)] ::=
                [$ 0 != 0 then -- Недопустимая для автомата операция.$, nl,
                 $    null;$, nl,
                 $  end if;$, nl
                ].
        [algo_automat(rep_trig_list1,_,_,[],_)] ::=
                [$) then -- Недопустимая для автомата операция.$, nl,
                 $    null;$, nl,
                 $  end if;$, nl
                ].
[in_list(reps(Value,Name),List)] ??
        [algo_automat(rep_trig_list1,Symbol,Value,[recv(_,Name,_,_) | T],List)] ::=
                [algo_automat(rep_trig_list1,Symbol,Value,T,List)].
        [algo_automat(rep_trig_list1,Symbol,Value,[recv(_,Name,_,_) | T],List)] ::=
                [txt(Symbol), $:old.$, txt(Name), $ != :new.$, txt(Name),
                 algo_automat(rep_trig_list1,$ or $,Value,T,List)
                ].


        % Отработка триггера удаления.
[algo(automat,Doc,Name,_,del_actual)] ??
        [algo_automat(del_trig,Doc)] : bagof(Value,algo(automat,Doc,Name,Value,del_actual),ValueList) ::=
                [$  if :old.$, txt(Name), $ not in $, algo_automat(ins_trig_list,$($,ValueList), $) then$, nl,
                 $    null; -- Недопутимая операция (алгоритм автомата).$, nl,
                 $  end if;$, nl, nl
                ].

[algo(automat,ADoc,AName,_,_), under(ADoc,Doc)] ??
        [algo_automat(del_trig,Doc)] : bagof(Value,algo(automat,ADoc,AName,Value,del_child(Doc)),ValueList) ::=
                [$  select $, txt(AName), $ into empty_decl from $, txt(ADoc), $ where $, txt(ADoc), $.primary_$, txt(ADoc), $ = :old.primary_$, txt(ADoc), $;$, nl,
                 $  if empty_decl not in $, algo_automat(ins_trig_list,$($,ValueList), $) then$, nl,
                 $      null; -- Недопустимая операция (алгоритм автомата).$, nl,
                 $  end if;$, nl, nl
                ].
        [algo_automat(del_trig,_)] ::= [].
