% ---------------------------------------------------------------------------- :
%                                                                              :
%       Система автоматизированного проектирования программного обеспечения    :
% для различных систем программирования с ЕЯИ-вводом.      (GSERV205)          :
%                                                                              :
%       Словарь обработки описания алгоритмов, использованных в системе.       :
%                                                                              :
%       Словарь содержит схемы синтаксического разбора описаний алгоритмов, ис-:
% пользуемых в системе и формирования предикатов и отношений по алгоритмам в ба:
% зе знаний.                                                                   :
%                                                                              :
%                                                                              :
%       (с) 1996г, А.В.Черномырдин, (3511-37-83-26).                           :
%       Версия 3.00 от 01.05.96.                                               :
%       Последнее изменение : 01.03.2003г                                      :
%                                                                              :
% ---------------------------------------------------------------------------- :

% ---------------------------------------------------------------------------- :
%                                                                              :
%       Специальные предикаты, используемые в системе.                         :
%                                                                              :
% ---------------------------------------------------------------------------- :

predicates.

        word([word([`П, `р, `о, `т, `о, `к, `о, `л, `и, `р, `о, `в, `а, `н, `и | Var1],Var1)],algo(protocol),$Протоколирования$).

        word([word([`С, `к, `в, `о, `з, `н | Var1],Var1), word([`а, `в, `т, `о, `н, `у, `м, `е, `р, `а, `ц, `и | Var2],Var2)],algo(glo_num),$Сквозний автонумерации$).
        word([word([`Л, `о, `к, `а, `л, `ь, `н | Var1],Var1), word([`а, `в, `т, `о, `н, `у, `м, `е, `р, `а, `ц, `и | Var2],Var2)],algo(loc_num),$Локальной автонумерации$).
        word([word([`Т, `е, `к, `у, `щ, `е | Var1],Var1), word([`д, `а, `т, `и, `р, `о, `в, `а, `н, `и | Var2],Var2)],algo(cur_date),$Текущего датирования$).
        word([word([`П, `а, `р, `о, `л, `ь, `н | Var1],Var1), word([`з, `а, `щ, `и, `т  | Var2],Var2)],algo(pwd),$Парольной защиты$).

        word([word([`И, `з, `в, `л, `е, `ч, `е, `н, `и | Var1],Var1), word([`п, `о, `д, `о, `б, `н | Var2],Var2), word([`и, `н, `ф, `о, `р, `м, `а, `ц, `и | Var3],Var3)],algo(extract),$Извлечения подобной информации$).
        word([word([`П, `о, `с, `л, `е, `д, `н | Var1],Var1), word([`з, `н, `а, `ч, `е, `н, `и  | Var2],Var2)],algo(last_val),$Последних значений$).

        word([word([`Б, `а, `л, `а, `н, `с | Var1],Var1), word([`о, `с, `т, `а, `т | Var2],Var2)],algo(r_b),$Баланса остатков$).

        word([word([`К, `о, `н, `е, `ч, `н | Var1],Var1), word([`а, `в, `т, `о, `м, `а, `т | Var2],Var2)],algo(automat),$Конечного автомата$).

% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила контекстной свертки лексем.                                    :
%                                                                              :
% ---------------------------------------------------------------------------- :

context.

        % Алгоритмы - упоминания.
_               : [algo(protocol)] ::= algo(protocol)/[algo(protocol)] : [].

        % Алгоритмы с общей схемой перечисления реквизитов :
_               : [algo(glo_num), use, recv, colon] ::= algo_(glo_num) : [].
_               : [algo(loc_num), use, recv, colon] ::= algo_(loc_num) : [].
_               : [algo(cur_date), use, recv, colon] ::= algo_(cur_date) : [].
_               : [algo(pwd), use, recv, colon] ::= algo_(pwd) : [].

        % Алгоритм последних значений.
_               : [algo(last_val), by, doc(Doc,_,_), use, recv, colon] ::= algo(last_val,Doc) : [].

        % Алгоритм извлечения подобной информации.
_               : [algo(extract), by, recv(_,_,Name,_,_), f_from(Doc,_,_), use, recv, colon] ::= algo(extract,Doc,Name) : [].
_               : [algo(extract), by, recv(_,_,Name,_,_), from, doc(Doc,_,_), use, recv, colon] ::= algo(extract,Doc,Name) : [].

        % Алгоритмы ведения счетчиков и остатков.
_               : [algo(r_b), by, recv(_,_,Name,_,_), f_from(Doc,_,_), colon] ::= algo(r_b,Doc,Name) : [].
_               : [algo(r_b), by, recv(_,_,Name,_,_), from, doc(Doc,_,_), colon] ::= algo(r_b,Doc,Name) : [].

        % Алгоритм конечного автомата.
_               : [algo(automat), by, recv(_,_,Name,_,_), f_from(Doc,_,_), colon] ::= algo(automat,Doc,Name)/[algo(automat,Doc,Name)] : [].
_               : [algo(automat), by, recv(_,_,Name,_,_), from, from(Doc,_,_), colon] ::= algo(automat,Doc,Name)/[algo(automat,Doc,Name)] : [].

%
%       Алгоритмы с общей схемой перечисления реквизитов.
%

algo_(Mode)     : [dephis, recv(_,Type,Name,_,_), f_from(Doc,_,_)] ::= algo_(Mode)/[get(recv(Doc,Type,Name,Chars,From)), algo(Mode,recv(Doc,Type,Name,Chars,From))] : [].
algo_(Mode)     : [dephis, recv(_,Type,Name,_,_), from, doc(Doc,_,_)] ::= algo_(Mode)/[get(recv(Doc,Type,Name,Chars,From)), algo(Mode,recv(Doc,Type,Name,Chars,From))] : [].

%
%       Алгоритм последних значений.
%

algo(last_val,Doc) : [dephis, recv, recv(_,_,Name,Chars,_)] ::= algo(last_val,Doc)/algo(last_val,Doc,Name,Chars) : [].
algo(last_val,Doc) : [dephis, recv(_,_,Name,Chars,_)]       ::= algo(last_val,Doc)/algo(last_val,Doc,Name,Chars) : [].

%
%       Алгоритм извлечения подобной информации.
%

algo(extract,Doc,Key) : [dephis, recv(DDoc,Type,Name,Chars,From)]  ::= algo(extract,Doc,Key)/[algo(extract,Doc,Key,recv(DDoc,Type,Name,Chars,From))] : [].
algo(extract,Doc,Key) : [dephis, group_doc(Doc,Name)]  ::= algo(extract,Doc,Key)/[bagof(R,group(recv,Name,R),RList)] : [group(RList)].
algo(extract,Doc,Key) : [group([])]  ::= algo(extract,Doc,Key)/[] : [].
algo(extract,Doc,Key) : [group([R | T])]  ::= algo(extract,Doc,Key)/[algo(extract,Doc,Key,R)] : [group(T)].

%
%       Алгоритм баланса остатков.
%

algo(r_b,Doc,R) : [dephis, group, by] ::= algo(r_b,Doc,R)/[] : [group([]), divizor].
algo(r_b,Doc,R) : [group(Group), divizor, recv(_,Type,Name,Chars,From)] ::= algo(r_b,Doc,R)/[] : [group([recv(Doc,Mode,Name,Chars,From) | Group])].
algo(r_b,Doc,R) : [group(Data), point] ::= algo(r_b,Doc,R)/algo(r_b,group,Doc,R,Data) : [].

algo(r_b,Doc,R) : [dephis, use, recv(_,_,Name1,_,_), f_from(Doc1,_,_), without, recv(_,_,Name2,_,_), f_from(Doc2,_,_), point] ::=
                   system/[get(recv(Doc,X1,R,X2,X3)), get(recv(Doc1,Y1,Name1,Y2,Y3)),
                   get(recv(Doc2,Z1,Name2,Z2,Z3)), algo(r_b,use,recv(Doc,X1,R,X2,X3),recv(Doc1,Y1,Name1,Y2,Y3),recv(Doc2,Z1,Name2,Z2,Z3))] : [].
algo(r_b,Doc,R) : [dephis, use, recv(_,_,Name1,_,_), f_from(Doc1,_,_), point] ::=
                   system/[get(recv(Doc,X1,R,X2,X3)), get(recv(Doc1,Y1,Name1,Y2,Y3)),
                   algo(r_b,use,recv(Doc,X1,R,X2,X3),recv(Doc1,Y1,Name1,Y2,Y3),none)] : [].
algo(r_b,Doc,R) : [dephis, use, without, recv(_,_,Name2,_,_), f_from(Doc2,_,_), point] ::=
                   system/[get(recv(Doc,X1,R,X2,X3)), get(recv(Doc2,Z1,Name2,Z2,Z3)),
                   algo(r_b,use,recv(Doc,X1,R,X2,X3),none,recv(Doc2,Z1,Name2,Z2,Z3))] : [].


%
%       Алгоритм конечного автомата:
%

algo(automat,Doc,Name)  : [dephis, equal, number(Digit), colon] ::= algo(automat,Doc,Name,Digit) : [].
algo(automat,Doc,Name,_): [dephis, equal, number(Digit), colon] ::= algo(automat,Doc,Name,Digit) : [].
algo(automat,Doc,Name,Value)    :
                  [dephis, del, all, under, point] ::= algo(automat,Doc,Name,Value) / [algo(automat,Doc,Name,Value,del_all_child)] : [].
algo(automat,Doc,Name,Value)    :
                  [dephis, del, doc(Child,_,_)] ::= algo(automat,Doc,Name,Value) / [algo(automat,Doc,Name,Value,del_child(Child))] : [].
algo(automat,Doc,Name,Value)    :
                  [dephis, del] ::= algo(automat,Doc,Name,Value) / [algo(automat,Doc,Name,Value,del_actual)] : [].
algo(automat,Doc,Name,Value)    :
                  [dephis, add, all, under] ::= algo(automat,Doc,Name,Value) / [algo(automat,Doc,Name,Value,add_all_child)] : [].
algo(automat,Doc,Name,Value)    :
                  [dephis, add, doc(Child,_,_)] ::= algo(automat,Doc,Name,Value) / [algo(automat,Doc,Name,Value,add_child(Child))] : [].
algo(automat,Doc,Name,Value)    :
                  [dephis, rep, all, recv] ::= algo(automat,Doc,Name,Value) / [algo(automat,Doc,Name,Value,rep_all_fields)] : [].
algo(automat,Doc,Name,Value)    :
                  [dephis, rep, recv(Doc,_,Changed,_,_), divizor] ::= algo(automat,Doc,Name,Value) / [algo(automat,Doc,Name,Value,rep_field(Changed))] : [dephis, rep].
algo(automat,Doc,Name,Value)    :
                  [dephis, rep, recv(Doc,_,Changed,_,_)] ::= algo(automat,Doc,Name,Value) / [algo(automat,Doc,Name,Value,rep_field(Changed))] : [].
