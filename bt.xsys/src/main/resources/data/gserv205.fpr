% ---------------------------------------------------------------------------- :
%                                                                              :
%               Модуль  GSERV205.                                              :
%                                                                              :
%       Технологический модуль GSERV205 предназначен для генерации текстов     :
% программ, экранных форм, документации и пакетных файлов разрабатываемой      :
% системы по описанию системы на языке, близком к естественному. Собственно    :
% модуль представляет собой оболочку интерпретатора правил построения подобных :
% систем. Параметры вызова модуля :                                            :
%                                                                              :
%       GSERV205 [<Файл_описания> [<Тип генерируемой системы>]] [/ключ ...]    :
%                                                                              :
%       Файл описания содержит описание будущей системы на языке, близком      :
% к естественному. Тип генерируемой системы в настоящее время следующий :      :
%                                                                              :
%       CLIPPER  - генерация программ на языке Clipper в сетевой среде         :
%                  MS/DOS;                                                     :
%       CAVO     - генерация программ lkz CA-Visual Objects + XBase.           :
%       CLIP_ORA - генерация программ на двухуровневые системы Clipper/ORACLE; :
%       CAVO_SQL - генерация программ для CA-Visual Objects + SQL.             :
%       CPP      - генерация программ для Microsoft C++.                       :
%       JAVA     - генерация программ для Java/ORACLE.                         :
%                                                                              :
%       Допустимо употребление следующих ключей :                              :
%                                                                              :
%       /g      - при генерации выдавать на экран не счетчик, а генерируемые   :
%                 строки. Полезна для поиска ошибок генерации.                 :
%                                                                              :
%       /e      - выдавать на экран строки, которые не смогла проанализировать :
%                 система. Используется для поиска ошибок в исходном тексте.   :
%                                                                              :
%       /f      - выдавать на экран все анализируемые строки в той последова-  :
%                 тельности, в которой они проходят стадии разбора. Служит для :
%                 отладки новых правил генерации.                              :
%                                                                              :
%       /s      - проводить только синтаксический разбор без попыток генерации.:
%                 Ускоряет работу системы на стадии отладки синтаксиса.        :
%                                                                              :
%       Автор : (c) 1996, Черномырдин А.В.                                     :
%       Версия : 2.03 от 01.05.96г.                                            :
%       Последнее изменение : 01.03.2003г.                                     :
%                                                                              :
% ---------------------------------------------------------------------------- :

:- public main/0.               % Головная процедура.
:- visible list/3.              % Предикат шаблонного вывода.
:- visible split/3.             % Предикат разбиения строки на список строк указанной длины.
:- visible inv/2.               % Предикат инвертирования списка.
:- visible in_list/2.           % Предикат поиска в списке.
:- visible split/4.             % Предикат разделения строки на две подстроки.
:- visible list_len/2.          % Предикат определения длины списка.

:- op(990,xfx,??).              % Хитрые операции, используемые в системе.
:- op(980,xfx,::=).
:- op(970,xfx,:).

% ---------------------------------------------------------------------------- :
%                                                                              :
%       Специальные функции системы.                                           :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Истина.
true.

        % Предикат повторения.
repeat.
repeat :- repeat.


        % Правила форматного вывода в файл.
fout(_,[]).
fout(Handle,[[Head | Tail1] | Tail2]) :-
        fout(Handle,[Head | Tail1]),
        !,                      fout(Handle,Tail2).
fout(Handle,[nl | Tail]) :-
        !,                      nl(Handle),
        fout(Handle,Tail).
fout(Handle,[Value | Tail]) :-
        !,                      write(Handle,Value),
        fout(Handle,Tail).


        % Правила форматного вывода на консоль.
pout([]).
pout([[Head | Tail1] | Tail2]) :-
        pout([Head | Tail1]),
        !,                      pout(Tail2).
pout([nl | Tail]) :-
        !,                      nl,
        pout(Tail).
pout([Value | Tail]) :-
        !,                      write(Value),
        pout(Tail).

% ---------------------------------------------------------------------------- :
%                                                                              :
%       Встроенные предикаты системы.                                          :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Построение списка вывода по списку данных и шаблону вывода.
list(List,(Parameter,PredList,Connector),Result) :-
       (retract(sys_picture(_,_));   true),
        asserta(sys_picture(Parameter,PredList)),
        f_list(List,Connector,Result).

        % Внутренняя процедура построения вывода по списку.
f_list([],_,[]).
f_list([Data],_,[Result]) :-
        call(sys_picture(Data,Result)).
f_list([Data | Tail1],Connect,[Result, Connect | Tail2]) :-
        call(sys_picture(Data,Result)),
        !,                      f_list(Tail1,Connect,Tail2).


        % Разбиение строки на список строк указанной длины.
split($$,_,[]).
split(String,Len,[String]) :-
        string_length(String,Length),   Length =< Len.
split(String,Len,[First | Rest]) :-
        substring(String,0,Len,First),
        substring(String,Len,9999,Tail),
        split(Tail,Len,Rest).


        % Инверсия списка.
inv(Src,Dest) :-
        inv(Src,[],Dest).
inv([],Data,Data).
inv([First | Tail],Data,Ready) :-
        inv(Tail,[First | Data],Ready).


        % Поиск в списке.
in_list(_,[]) :- !, fail.
in_list(Pred,[Pred | _]) :- !.
in_list(Pred,[_ | Tail]) :- in_list(Pred,Tail).


        % Разделение строки на две подстроки.
split(Src,Poz,S1,S2) :-
        string_length(Src,Len),         Len > Poz,
        substring(Src,0,Poz,S1),        Rest is Len - Poz,
        substring(Src,Poz,Rest,S2).
split(Src,_,Src,$$).

        % Определения длины списка.
list_len(List,Len) :- list_len(List,0,Len).
list_len([],Data,Data).
list_len([_ | T],Num,Data) :-
        NewNum is Num + 1,              list_len(T,NewNum,Data).


% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила загрузки описания словаря системы.                             :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Правила почастной загрузки файлов словарей.
load_voc([],_).
load_voc([Name | T],Accepted) :-
        pout([$ $, Name]),              open(Handle,Name,r),
        ctr_inc(9,Val),                 % Вывод в 3 столбика.
       (Val = 2, pout([nl]), ctr_set(9,0); true),
        load1_voc(Handle,Accepted),     close(Handle),
        load_voc(T,Accepted).
load1_voc(Handle,List) :-
        [!call(modes(Mode))!],          read(Handle,Term),
       (Term = end_of_file;
        [!analyze_voc(Term,Mode),
         (in_list(Term,List),           retract(modes(_)),
          assertz(modes(undef));
          true
         )!],                           fail).
load1_voc(Handle,List) :-
        !,                              load1_voc(Handle,List).

        % Обработка операторов режима.
analyze_voc(words,_) :-
        [!retract(modes(_))!],          asserta(modes(words)).
analyze_voc(common,_) :-
        [!retract(modes(_))!],          asserta(modes(common)).
analyze_voc(context,_) :-
        [!retract(modes(_))!],          asserta(modes(context)).
analyze_voc(internal,_) :-
        [!retract(modes(_))!],          asserta(modes(internal)).
analyze_voc(generate,_) :-
        [!retract(modes(_))!],          asserta(modes(generate)).
analyze_voc(predicates,_) :-
        [!retract(modes(_))!],          asserta(modes(predicates)).

        % Обработка описаний в зависимости от режима.
analyze_voc(Abbreviation ::= Value,words) :-
        list_text(List,Abbreviation),   [!add_analyze_voc(List,FullList,Rest)!],
        assertz(decode(FullList,Rest,Value)).
analyze_voc(Left ::= Right,common) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(common(NewLeft,NewRight)).
analyze_voc(OldContext : Left ::= NewContext/ListActions : Right,context) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(context(OldContext/NewContext,NewLeft,NewRight,ListActions)).
analyze_voc(OldContext : Left ::= NewContext : Right,context) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(context(OldContext/NewContext,NewLeft,NewRight,[])).
analyze_voc([Left | TailL] ::= [Right | TailR],internal) :-
        assertz(internal([Left | TailL],[Right | TailR])).
analyze_voc([Left | TailL] ::= Right,internal) :-
        assertz(internal([Left | TailL],[Right])).
analyze_voc(Left ::= [Right | TailR],internal) :-
        assertz(internal([Left],[Right | TailR])).
analyze_voc(Left ::= Right,internal) :-
        assertz(internal([Left],[Right])).
analyze_voc([FCond | Cond] ?? Left : [First | Actions] ::= Right,generate) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(generate([FCond | Cond],NewLeft,NewRight,[First | Actions])).
analyze_voc([FCond | Cond] ?? Left : Actions ::= Right,generate) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(generate([FCond | Cond],NewLeft,NewRight,[Actions])).
analyze_voc([FCond | Cond] ?? Left ::= Right,generate) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(generate([FCond | Cond],NewLeft,NewRight,[])).
analyze_voc(Left : [First | Actions] ::= Right,generate) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(generate([],NewLeft,NewRight,[First | Actions])).
analyze_voc(Left : Actions ::= Right,generate) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(generate([],NewLeft,NewRight,[Actions])).
analyze_voc(Left ::= Right,generate) :-
        add(Left,NewLeft,Var),          add(Right,NewRight,Var),
        assertz(generate([],NewLeft,NewRight,[])).
analyze_voc(Pred,predicates) :- assertz(Pred).
analyze_voc(_,undef).


        % Правило преобразования короткой лексемы в список.
add_analyze_voc([],Var,Var).
add_analyze_voc([First | Tail],[First | Rest],Var) :-
        add_analyze_voc(Tail,Rest,Var).


% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила формирования лексем.                                           :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Построение лексем по входным символам.
lex(Handle,13,Lexema,EndChar) :-
        get0(Handle,NextChar),          !,
        lex(Handle,NextChar,Lexema,EndChar).
lex(Handle,10,Lexema,EndChar) :-
        get0(Handle,NextChar),          !,
        ctr_inc(9,_),                   lex(Handle,NextChar,Lexema,EndChar).
lex(Handle,32,Lexema,EndChar) :-
        get0(Handle,NextChar),          !,
        lex(Handle,NextChar,Lexema,EndChar).
lex(Handle,`%,Lexema,EndChar) :-        % Комментарий.
        repeat,                         get0(Handle,10),
        lex(Handle,10,Lexema,EndChar).
lex(Handle,26,eof,26).
lex(Handle,`,,divizor,EndChar)          :- get0(Handle,EndChar).
lex(Handle,`:,colon,EndChar)            :- get0(Handle,EndChar).
lex(Handle,`;,semicolon,EndChar)        :- get0(Handle,EndChar).
lex(Handle,`-,dephis,EndChar)           :- get0(Handle,EndChar).
lex(Handle,`.,point,EndChar)            :- get0(Handle,EndChar).
lex(Handle,`",term(Text,Words),EndChar) :-
        get0(Handle,Char),              termin_lex(Handle,Char,[],TextList,Words),
        list_text(TextList,Text),       get0(Handle,EndChar).
lex(Handle,`(,expr(Expr,List),EndChar) :-
        get0(Handle,Char),              expr_lex(Handle,Char,1,ListExpr,List),
        list_text(ListExpr,Expr),       get0(Handle,EndChar).
lex(Handle,Char,name(Name),EndChar) :-
       (Char >= `A, Char =< `Z;  Char >= `a, Char =< `z),
        name_lex(Handle,Char,NameList,EndChar),
        list_text(NameList,Name).
lex(Handle,Char,number(Value),EndChar) :-
        Char >= `0, Char =< `9,         digit_lex(Handle,Char,NameList,EndChar),
        list_text(NameList,Name),       int_text(Value,Name).
lex(Handle,Char,word(PredList),EndChar) :-
        Char >= 128,                    pred_lex(Handle,Char,PredList,EndChar).
lex(Handle,Char,word(Char),EndChar) :-
        get0(Handle,NewChar).


        % Формирование лексемы "name".
name_lex(Handle,Char,[Char | Rest],EndChar) :-
       (Char >= `A, Char =< `Z;  Char >= `a, Char =< `z;  Char >= `0, Char =< `9; Char = `_),
        get0(Handle,Symbol),            name_lex(Handle,Symbol,Rest,EndChar).
name_lex(Handle,Char,[],Char).


        % Формирование лексемы "number".
digit_lex(Handle,Char,[Char | Rest],EndChar) :-
        Char >= `0, Char =< `9,         get0(Handle,Symbol),
        digit_lex(Handle,Symbol,Rest,EndChar).
digit_lex(Handle,Char,[],Char).


        % Формирование лексемы "term".
termin_lex(Handle,`",[],[],[]).
termin_lex(Handle,`",Text,[],[word(NewText,Var)]) :-
        inv(Text,InvText),              add(InvText,NewText,Var).
termin_lex(Handle,`|,Ready,Tail1,[word(Text,Var) | Tail2]) :-
        inv(Ready,InvText),             add(InvText,Text,Var),
        !,                              get0(Handle,Char),
        termin1_lex(Handle,Char,[],Tail1,Tail2).
termin_lex(Handle,32,Ready,[32 | Tail1],[word(Text,Var) | Tail2]) :-
        inv(Ready,InvText),             add(InvText,Text,Var),
        !,                              get0(Handle,Char),
        termin_lex(Handle,Char,[],Tail1,Tail2).
termin_lex(Handle,Char,Ready,[Char | Tail1],Tail2) :-
        get0(Handle,NewChar),           termin_lex(Handle,NewChar,[Char | Ready],Tail1,Tail2).
termin1_lex(Handle,`",[],[],[]).
termin1_lex(Handle,`",Text,[],[word(NewText,Var)]) :-
        inv(Text,InvText),              add(InvText,NewText,Var).
termin1_lex(Handle,32,Ready,[32 | Tail1],Tail2) :-
        get0(Handle,Char),              termin_lex(Handle,Char,Ready,Tail1,Tail2).
termin1_lex(Handle,Char,Ready,[Char | Tail1],Tail2) :-
        get0(Handle,NewChar),           termin1_lex(Handle,NewChar,Ready,Tail1,Tail2).

        % Вставка хвоста лексемы для идентификации.
add([],Var,Var).
add([Data | Tail1],[Data | Tail2],Rest) :- add(Tail1,Tail2,Rest).

        % Формирование служебных лексем и лексемы "word".
pred_lex(Handle,Char,[Char | Tail],EndChar) :-
        (Char >= 128; Char >= `0, Char =< `9; Char = `_),
        get0(Handle,NewChar),
        pred_lex(Handle,NewChar,Tail,EndChar).
pred_lex(Handle,EndChar,[],EndChar).


        % Формирование лексемы типа арифметического выражения.
expr_lex(Handle,_,0,[],[]).
expr_lex(Handle,`),1,[],[]).
expr_lex(Handle,`),Level,[`) | Rest],List) :-
        get0(Handle,NewChar),           NewLevel is Level - 1,
        expr_lex(Handle,NewChar,NewLevel,Rest,List).
expr_lex(Handle,`(,Level,[`( | Rest],List) :-
        get0(Handle,NewChar),           NewLevel is Level + 1,
        expr_lex(Handle,NewChar,NewLevel,Rest,List).
expr_lex(Handle,Char,Level,Rest,[Name | List]) :-
        (Char >= `a, Char =< `z;
         Char >= `A, Char =< `Z),
        name_expr_Lex(Handle,Char,Rest,NameList,NewChar,NewRest),
        list_text(NameList,Name),
        expr_lex(Handle,NewChar,Level,NewRest,List).
expr_lex(Handle,Char,Level,[Char | Rest],List) :-
        get0(Handle,NewChar),           expr_lex(Handle,NewChar,Level,Rest,List).


        % Формирование списка имен в формуле.
name_expr_Lex(Handle,Char,[Char | Rest],[Char | NameList],NewChar,NewRest) :-
        (Char >= `a, Char =< `z;
         Char >= `A, Char =< `Z;
         Char >= `0, Char =< `9;
         Char = `_),
        get0(Handle,NextChar),
        name_expr_Lex(Handle,NextChar,Rest,NameList,NewChar,NewRest).
name_expr_Lex(Handle,Char,Rest,[],Char,Rest).


% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила построения предложения из лексем.                              :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Правило построения предложения из лексем.
sent(Handle,Char,Sentence,End) :-
        lex_sent(Handle,Char,LexList,End),
       (call(print(full)), write($ Исходное : $), write_lexema(LexList), nl;
        true
       ),                               collapt_sent(LexList,Sentence).


        % Правило сборки лексем в предложение.
lex_sent(Handle,Char,Sentence,End) :-
        lex(Handle,Char,Lexema,NewChar),
        lex_sent(Handle,NewChar,Lexema,Sentence,End).
lex_sent(Handle,Char,colon,[colon],Char).
lex_sent(Handle,Char,point,[point],Char).
lex_sent(Handle,Char,eof,[eof],Char).
lex_sent(Handle,NewChar,Lexema,[Lexema | Sentence],End) :-
        !,                              lex_sent(Handle,NewChar,Sentence,End).


        % Правило замены лексем на длинные цепочки ранее определенных параметров.
collapt_sent([],[]).
collapt_sent([word(Word) | LexList],[Recv | Sentence]) :-
        call(word([word(Word,Var) | Rest],Recv,_)),
        char_sent(Var),                 unify_sent(LexList,Rest,RestList),
        !,                              collapt_sent(RestList,Sentence).
collapt_sent([word(Word) | LexList],[Recv | Sentence]) :-
        call(decode(Word,Rest,Recv)),
        char_sent(Rest),
        !,                              collapt_sent(LexList,Sentence).
collapt_sent([word(Word) | LexList],[undef(Word) | Sentence]) :-
        !,                              collapt_sent(LexList,Sentence).
collapt_sent([name(Word) | LexList],[Lexema | Sentence]) :-
        name_sent(Word,Lexema),         !,
        collapt_sent(LexList,Sentence).
collapt_sent([Pred | Tail],[Pred | Rest]) :-
        !,                              collapt_sent(Tail,Rest).


        % Правило унификации остатков лексемы.
unify_sent(Rest,[],Rest).
unify_sent([word(Word) | Tail1],[word(Word,Var) | Tail2],Rest) :-
        char_sent(Var),
        !,                              unify_sent(Tail1,Tail2,Rest).
unify_sent([word(Word) | Tail],_,[word(Word) | Tail]) :-
        call(decode(Word,Rest,_)),
        char_sent(Rest),                !.


        % Правило унификации имен.
name_sent(Word,Lexema) :-
        call(nameword(Word,Lexema,_)).
name_sent(Word,name(Word)).

        % Правило унификации наименований.
char_sent([]).
char_sent([_]).
char_sent([_,_]).
char_sent([_,_,_]).
char_sent([_,_,`с,`я]).
char_sent([_,_,`с,`ь]).
char_sent([_,_,_,`с,`я]).
char_sent([_,_,_,`с,`ь]).


% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила бесконтекстной свертки лексем.                                 :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Правила просмотра бесконтекстных правил.
swap(Src,Dest) :-
        swap(Src,Temp,Cond),
       (Cond = no,                      Dest = Temp;
        !,                              swap(Temp,Dest)
       ).

        % Цикл повторных замен.
swap([],[],no).
swap(Src,Dest,yes) :- call(common(Src,Dest)).
swap([First | LexList],[First | Ready],Cond) :-
        !,                              swap(LexList,Ready,Cond).



% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила контекстной свертки лексем.                                    :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Правила просмотра контекстных правил.
cswap(LexList,Ready) :-
        call(context(Context)),         cswap(Context,LexList,Temp,Cond),
       (Cond = no,                      Ready = Temp;
        !,                              cswap(Temp,Ready)
       ).


        % Цикл повторных замен.
cswap(_,[],[],no).
cswap(Context,Src,Dest,yes) :-
        call(context(Context/NewContext,Src,Dest,Actions)),
        actions_cswap(Actions),         !,
        retract(context(Context)),      assertz(context(NewContext)).
cswap(Context,[First | LexList],[First | Ready],Cond) :-
        !,                              cswap(Context,LexList,Ready,Cond).


        % Правила обработки действий контекста.
actions_cswap([]).
actions_cswap([get(Pred) | Tail]) :-
        call(Pred),                     !,
        actions_cswap(Tail).
actions_cswap([bagof(Name,Pred,List) | Tail]) :-
        bagof(Name,Pred,List),          !,
        actions_cswap(Tail).
actions_cswap([Pred | Tail]) :-
        assertz(Pred),                  actions_cswap(Tail).
actions_cswap(get(Pred)) :- call(Pred).
actions_cswap(bagof(Name,Pred,List)) :- bagof(Name,Pred,List).
actions_cswap(Pred) :- assertz(Pred).


% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила построения и свертки входного текста.                          :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Правила построения и свертки предложений.
lexema(Handle,Char) :-
        ctr_set(0,Char),            ctr_set(9,0),
        repeat,                     ctr_is(0,Symbol),
        [!mk_lexema(Handle,Symbol,ReadySent,End)!],
        ctr_set(0,End),             ReadySent = [eof].


        % Правило последовательной обработки предложения.
mk_lexema(Handle,Char,ReadySent,End) :-
        sent(Handle,Char,Sent,End),
       (call(print(full)), call(context(Context)), write($ Контекст : $), write(Context), nl,
        write($ Идентифицированное : $), write_lexema(Sent), nl;
        true
       ),                                       swap(Sent,NewSent),
       (call(print(full)), write($ Замещенное : $), write_lexema(NewSent), nl;
        true
       ),                                       cswap(NewSent,ReadySent),
       ((call(print(full));
         call(print(err)), not(ReadySent = []), not(ReadySent = [point]), not(ReadySent = [eof])
        ), write($ Свернутое : $), write_lexema(ReadySent), nl;
        ctr_is(9,Val), list_text([13, 32],Txt), write(Txt), write(Val)
       ),
       (not(ReadySent = []), not(ReadySent = [point]), not(ReadySent = [eof]), assertz(was_error);
        true
       ).

        % Правило вывода свернутых лексем в приличном виде.
write_lexema([]) :- nl.
write_lexema([undef(Text) | Tail]) :-
       (clear_write_lexema(Text,FullText);
        FullText = Text
       ),
        list_text(FullText,Out),    write($<$),
        write(Out),                 write($>$),
        !,                          write_lexema(Tail).
write_lexema([word(Text) | Tail]) :-
       (clear_write_lexema(Text,FullText);
        FullText = Text
       ),
        list_text(FullText,Out),    write($<$),
        write(Out),                 write($>$),
        !,                          write_lexema(Tail).
write_lexema([Lex | Tail]) :-
        call(decode(Text,_,Lex)),   list_text(Text,Out),
        write(Out),                 write($ $),
        !,                          write_lexema(Tail).
write_lexema([Lex | Tail]) :-
        write(Lex),                 write($ $),
        !,                          write_lexema(Tail).

        % Правила очистки данных в списке.
clear_write_lexema([32 | _],[]).
clear_write_lexema([Char | T1],[Char | T2]) :-
        clear_write_lexema(T1,T2).


% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила для обработки внутренних действий.                             :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Общее правило выполнения внутренних преобразований.
make_internal :-
        call(internal(Left,Right)),     callcond(Left),
        interactions(Right),            !,
        ctr_inc(9,Val),                 list_text([13, 32],Txt),
        write(Txt),                     write(Val),
        make_internal.
make_internal :-
        pout([nl, $Внутренние преобразования закончены.$, nl]).


        % Правила обработки правой части внутренних правил.
interactions([]).
interactions([add(Pred) | Tail]) :-
        assertz(Pred),                  !,
        interactions(Tail).
interactions([clear(Pred) | Tail]) :-
       (retract(Pred),                  fail;
        true),                          !,
        interactions(Tail).
interactions([del(Pred) | Tail]) :-
       (retract(Pred);                  true),
        !,                              interactions(Tail).
interactions([cond(Pred,Actions) | Tail]) :-
       (call(Pred),                     interactions(Actions);
        true),                          !,
        interactions(Tail).



% ---------------------------------------------------------------------------- :
%                                                                              :
%       Правила для обработки выполнимых действий.                             :
%                                                                              :
% ---------------------------------------------------------------------------- :


        % Правила обработки действий.
make_actions :-
        call(make(Pred)),               pout([nl, $Обработка $, Pred, nl]),
        ctr_set(9,0),                   [!gen([make(Pred)])!],
        fail.
make_actions.

        % Правила просмотра бесконтекстных правил.
gen([]).
gen([[F | T1] | T2]) :- !, gen([F | T1]), !, gen(T2).
gen([0 * _ | T]) :-             !, gen(T).
gen([Count * txt(Value) | T]) :-
        ctr_set(8,Count),       ctr_is(0,Handle),
        repeat,                 write(Handle,Value),
       (call(outprint),         write(Value);
        true),                  ctr_dec(8,1),
        !,                      gen(T).
gen([txt(Value) | T]) :-
        ctr_is(0,Handle),       write(Handle,Value),
       (call(outprint),         write(Value);
        true),                  !, gen(T).
gen([Count * tab | T]) :-
        ctr_set(8,Count),       ctr_is(0,Handle),
        repeat,                 list_text([9],Value),
        write(Handle,Value),
       (call(outprint),         write(Value);
        true),                  ctr_dec(8,1),
        !,                      gen(T).
gen([tab | T]) :-
        ctr_is(0,Handle),       list_text([9],Value),
        write(Handle,Value),
       (call(outprint),         write(Value);
        true),                  !, gen(T).
gen([Count * nl | T]) :-
        ctr_set(8,Count),       ctr_is(0,Handle),
        repeat,                 nl(Handle),
       (call(outprint),         nl;
        ctr_inc(9,Val),         list_text([13, 32],Txt),
        write(Txt),             write(Val)),
        ctr_dec(8,1),           !, gen(T).
gen([nl | T]) :-
        !, ctr_is(0,Handle),    nl(Handle),
       (call(outprint),         nl;
        ctr_inc(9,Val),         list_text([13, 32],Txt),
        write(Txt),             write(Val)),
        !,                      gen(T).
gen([file(Path,Value,Extend) | T]) :-
        ctr_is(0,Handle),       (close(Handle); true),
        (atom_string(Value,Val1);Value = Val1),
        (atom_string(Extend,Ext1);Extend = Ext1),
        concat([Path,Val1,$.$,Ext1],Name),
        create(NewHandle,Name), ctr_set(0,NewHandle),
        !,                      gen(T).
gen([Integer | T])  :-
        integer(Integer),               ctr_is(0,Handle),
        write(Handle,Integer),
       (call(outprint),                 write(Integer);
        true),                          !, gen(T).
gen([String | T])  :-
        string(String),                 ctr_is(0,Handle),
        write(Handle,String),
       (call(outprint),                 write(String);
        true),                          !, gen(T).
gen(LexList) :- xgen(LexList,NewLex), !, gen(NewLex).


        % Правило подстановки лексем.
xgen(Src,Dest) :-
        call(generate(Cond,Src,Dest,Actions)),
        callcond(Cond),                 [!actions_cswap(Actions)!].
xgen([First | Tail],[First | Ready]) :-
        !,                              xgen(Tail,Ready).


        % Правило проверки условий.
callcond([]).
callcond([Cond | Tail]) :-
        call(Cond),                     callcond(Tail).


% ---------------------------------------------------------------------------- :
%                                                                              :
%       Предикаты обработки параметров.                                        :
%                                                                              :
% ---------------------------------------------------------------------------- :

        % Общее правило обработки параметров.
parameters(Voc,File) :-
        command_string(Text),           list_text(List,Text),
        lex_par(List,LexList),          list_par(LexList,Lex),
        unify_par(Lex,Voc,File),        !.


        % Разборка строки параметров на лексемы.
lex_par([],[]).
lex_par([32 | Tail],Rest) :-
        lex_par(Tail,Rest).
lex_par([`/, `f | Tail],Rest) :-        % Печать всех промежуочных результатов анализа.
        asserta(print(full)),           lex_par(Tail,Rest).
lex_par([`/, `e | Tail],Rest) :-        % Печать ошибочных предложений после анализа.
        asserta(print(err)),            lex_par(Tail,Rest).
lex_par([`/, `g | Tail],Rest) :-        % Печать генерируемых строк.
        asserta(outprint),              lex_par(Tail,Rest).
lex_par([`/, `s | Tail],Rest) :-        % Только проверка синтаксиса без генерации.
        asserta(nogen),                 lex_par(Tail,Rest).
lex_par([Char | Tail1],[name([Char | Tail2]) | Tail3]) :-
        lex_par(Tail1,Tail2,Rest),      lex_par(Rest,Tail3).
lex_par([],[],[]).
lex_par([32 | Tail],[],[32 | Tail]).
lex_par([Char | Tail1],[Char | Tail2],Rest) :-
        lex_par(Tail1,Tail2,Rest).


        % Слияние списков в строки.
list_par([],[]).
list_par([name(List) | Tail1],[name(Text) | Tail2]) :-
        list_text(List,Text),           list_par(Tail1,Tail2).


        % Обработка умолчаний.
unify_par([name(File), name(Voc)],Voc,File).
unify_par([name(File)],$clipper$,File).
unify_par(_,$clipper$,$system.txt$) :-
        write($Задавайте параметры явно :$), nl,
        write($     GSERV205 Файл.txt [{clipper | cavo | clip_ora | cavo_sql | cpp}] /f /g /e$), nl,
        write($              Файл.txt - файл описания генерируемой системы (по умолчанию SYSTEM.TXT);$), nl,
        write($                 clipper  - система генерируется для MS/DOS-Clipper 5.2 (по умолчанию);$), nl,
        write($                 cavo     - система генерируется для Windows/CA-Visual Objects;$), nl,
        write($                 clip_ora - система генерируется для MS/DOS-Clipper 5.2 + UNIX/ORACLE;$), nl,
        write($                 clipper  - система генерируется для Windows/CA-Visual Objects с SQL-сервером.$), nl,
        write($                 cpp      - система генерируется для Windows/Microsoft C++.$), nl,
        write($                 java     - система генерируется для Java/ORACLE 9i.$), nl,
        write($              /e - выдавать ошибки на консоль;$), nl,
        write($              /f - выдавать трассу разбора на консоль;$), nl,
        write($              /e - выдавать генерируемые строки на консоль.$), nl.



% ---------------------------------------------------------------------------- :
%                                                                              :
%       Основное правило программы.                                            :
%                                                                              :
% ---------------------------------------------------------------------------- :

main :- pout([$=== (c) 1993-2000, А.В.Черномырдин. ЕЯИ-генератор прикладных систем.$, nl,
              $        V.R = 3.00 от 01.03.2000, г.Магнитогорск.$, nl, nl]),
        assertz(modes(undef)),          assertz(context(system)),
        parameters(VocName,FileName),   voc_par(VocName,VocList,GenList),
        pout([$Загрузка словарей анализа :$, nl]),
        ctr_set(9,0),                   load_voc(VocList,[internal,generate]),
        pout([nl, $Анализ входного текста :$, nl]),
        open(Handle2,FileName,r),       lexema(Handle2,32),
        close(Handle2),                 pout([nl, $Анализ текста завершен.$, nl]),
       (call(was_error),                pout([nl, $Ошибки во входной информации - генерация отменена.$, nl]);
        call(nogen),                    pout([nl, $Генерация отменена - опция "/s" указана.$, nl]);
        create(Handle3,$empty$),        ctr_set(0,Handle3),
         (pout([$Загрузка словарей генерации :$, nl]),
          ctr_set(9,0),                 load_voc(GenList,[words,common,context,predicates]),
          pout([nl, $Внутренние преобразования : $, nl]),
          ctr_set(9,0),                 make_internal,
          make_actions,                 pout([nl, $=== Конец работы ЕЯИ-генератора.$, nl]);
          pout([nl, $Внутренние преобразования не выполнены.$, nl])
         )
       ).

% ---------------------------------------------------------------------------- :
%                                                                              :
%       Дополнительный сегмент.                                                :
%                                                                              :
% ---------------------------------------------------------------------------- :

:- segment(extend).

        % Списки словарей по каждой системе программирования.
voc_par($clipper$,[$.\parse\vocabula.ari$,$.\parse\algo.ari$],
                  [$.\parse\internal.ari$,$.\parse\algo_i.ari$,
                   $.\exec\doc\user.ari$,$.\exec\doc\acad.ari$,$.\exec\doc\doc.ari$,
                   $.\exec\common\bases.ari$,
                   $.\exec\main\main_d.ari$,
                   $.\exec\forms\clipper.ari$,
                   $.\exec\algo\main_d.ari$, $.\exec\algo\clipper.ari$,
                   $.\exec\program\clipper.ari$,
                   $.\exec\program\input\clipper.ari$,
                   $.\exec\program\menu\clipper.ari$,
                   $.\exec\program\tasks\clipper.ari$
                   ]).
voc_par($cavo$,   [$.\parse\vocabula.ari$,$.\parse\algo.ari$],
                  [$.\parse\internal.ari$,$.\parse\algo_i.ari$,
                   $.\exec\doc\user.ari$,$.\exec\doc\acad.ari$,$.\exec\doc\doc.ari$,
                   $.\exec\common\bases.ari$,
                   $.\exec\main\main_w.ari$,
                   $.\exec\forms\cavo.ari$,
                   $.\exec\algo\main_w.ari$, $.\exec\algo\cavo.ari$,
                   $.\exec\program\cavo.ari$,
                   $.\exec\program\input\cavo.ari$,
                   $.\exec\program\tasks\cavo.ari$
                   ]).
voc_par($clip_ora$,[$.\parse\vocabula.ari$,$.\parse\algo.ari$],
                  [$.\parse\internal.ari$,$.\parse\algo_i.ari$,
                   $.\exec\doc\user.ari$,$.\exec\doc\acad.ari$,$.\exec\doc\doc.ari$,
                   $.\exec\common\bases.ari$,
                   $.\exec\main\main_d.ari$,
                   $.\exec\forms\form_d.ari$,
                   $.\exec\algo\main.ari$, $.\exec\algo\menu_d.ari$,
                   $.\exec\program\clip_ora.ari$
                   ]).
voc_par($cavo_sql$,[$.\parse\vocabula.ari$,$.\parse\algo.ari$],
                  [$.\parse\internal.ari$,$.\parse\algo_i.ari$,
                   $.\exec\doc\user.ari$,$.\exec\doc\acad.ari$,$.\exec\doc\doc.ari$,
                   $.\exec\common\bases.ari$,
                   $.\exec\main\main_w.ari$,
                   $.\exec\forms\form_w.ari$,
                   $.\exec\algo\main_w.ari$, $.\exec\algo\menu_w.ari$,
                   $.\exec\program\clip_orw.ari$
                   ]).
voc_par($cpp$,    [$.\parse\vocabula.ari$,$.\parse\algo.ari$],
                  [$.\parse\internal.ari$,$.\parse\algo_i.ari$,
                   $.\exec\doc\user.ari$,$.\exec\doc\acad.ari$,$.\exec\doc\doc.ari$,
                   $.\exec\common\bases.ari$,
                   $.\exec\forms\cpp.ari$,
                   $.\exec\algo\cpp.ari$,
                   $.\exec\algo\main_cpp.ari$,
                   $.\exec\program\cpp.ari$,
                   $.\exec\program\input\cpp.ari$,
                   $.\exec\program\menu\cpp.ari$,
                   $.\exec\program\resource\cpp.ari$,
                   $.\exec\program\tasks\cpp.ari$
                   ]).
voc_par($java$,   [$.\parse\vocabula.ari$,$.\parse\algo.ari$],
                  [$.\parse\internal.ari$,$.\parse\algo_i.ari$,
                   $.\exec\doc\user.ari$,$.\exec\doc\acad.ari$,$.\exec\doc\doc.ari$,
                   $.\exec\common\orabases.ari$,
                   $.\exec\algo\ora_jav.ari$,
                   $.\exec\algo\orajava.ari$,
                   $.\exec\algo\main_jav.ari$,
                   $.\exec\program\java.ari$,
                   $.\exec\program\menu\java.ari$
                   ]).
voc_par(Name,_,_) :-
        pout([$Тип системы $, Name, $ неверно задан. $, nl]),
        !,                      fail.


