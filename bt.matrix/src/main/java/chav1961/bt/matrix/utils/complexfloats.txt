-
    programName: zeroMatrixKernel
    programBody: |
        __kernel void zeroMatrixKernelCF(__global float2 *c) {
           int gid = get_global_id(0);
           c[gid] = (0.0, 0.0);
        }

-
    programName: identityMatrixKernel
    programBody: |
        __kernel void identityMatrixKernelCF(int dim,
                                           __global float2 *C){
            int iCol = get_global_id(0);
            int iRow = get_global_id(1);
            C[iRow*dim + iCol] = iCol == iRow ? (1.0, 0.0) : (0.0, 0.0);
        }

-
    programName: assignMatrixKernel
    programBody: |
        __kernel void assignMatrixKernelCF(__global const float2 *a,
                                         __global float2 *c) {
           int gid = get_global_id(0);
           c[gid] = a[gid];
        }

-
    programName: addMatrixKernel
    programBody: |
        __kernel void addMatrixKernelCF(__global const float2 *a,
                                      __global const float2 *b,
                                      __global float2 *c) {
            int gid = get_global_id(0);
            c[gid].x = a[gid].x + b[gid].x;
            c[gid].y = a[gid].y + b[gid].y;
        }

-
    programName: subtractMatrixKernel
    programBody: |
        __kernel void subtractMatrixKernelCF(__global const float2 *a,
                                           __global const float2 *b,
                                           __global float2 *c) {
           int gid = get_global_id(0);
           c[gid].x = a[gid].x - b[gid].x;
           c[gid].y = a[gid].y - b[gid].y;
        }

-
    programName: addScalarKernel
    programBody: |
        __kernel void addScalarKernelCF(__global const float2 *a,
                                      const float2 scalar,
                                      __global float2 *c) {
            int gid = get_global_id(0);
            c[gid].x = a[gid].x + scalar.x;
            c[gid].y = a[gid].y + scalar.y;
        }

-
    programName: subtractFromScalarKernel
    programBody: |
        __kernel void subtractFromScalarKernelCF(__global const float2 *a,
                                               const float2 scalar,
                                               __global float2 *c) {
            int gid = get_global_id(0);
            c[gid].x = scalar.x - a[gid].x;
            c[gid].y = scalar.y - a[gid].y;
        }

-
    programName: mulMatrixKernel
    programBody: |
        inline float2 cmul(float2 a, float2 b){
            return (float2)( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
        }
        __kernel void mulMatrixKernelCF(int dim,
                                      __global const float2 *A,
                                      __global const float2 *B,
                                      __global float2 *C) {
            int iCol = get_global_id(0);
            int iRow = get_global_id(1);
            float2 result = (0.0, 0.0);
            float2 temp;
            for(int i = 0; i < dim; i++) {
                temp = cmul(A[iRow*dim + i], B[i*dim + iCol]);
                result.x += temp.x; 
                result.y += temp.y; 
            }
            C[iRow*dim + iCol] = result;
        }

-
    programName: mulHadamardMatrixKernel
    programBody: |
        inline float2 cmul(float2 a, float2 b){
            return (float2)( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
        }
        __kernel void mulHadamardMatrixKernelCF(__global const float2 *a,
                                              __global const float2 *b,
                                              __global float2 *c) {
            int gid = get_global_id(0);
            c[gid] = cmul(a[gid], b[gid]);
        }

-
    programName: mulScalarKernel
    programBody: |
        inline float2 cmul(float2 a, float2 b){
            return (float2)( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
        }
        __kernel void mulScalarKernelCF(__global const float2 *a,
                                      const float2 scalar,
                                      __global float2 *c) {
            int gid = get_global_id(0);
            c[gid] = cmul(a[gid], scalar);
        }

-
    programName: mulKronekerMatrixKernel
    programBody: |
        __kernel void mulKronekerMatrixKernelCF(__global const float2 *a,
                                              __global const float2 *b,
                                              __global float2 *C,
                                              const int rowDim,
                                              const int colDim,
                                              const int bRows,
                                              const int bCols) {
            int aRow = get_global_id(0);
            int aCol = get_global_id(1);
            int lineSize = colDim * bCols;
            float2 k = a[aRow*colDim + aCol];
            for (int bRow = 0; bRow < bRows; bRow++) {
                for (int bCol = 0; bCol < bCols; bCol++) {
                    int rowIndex = aRow*rowDim + bRow;
                    int colIndex = aCol*colDim + bCol;
                    C[rowIndex*lineSize + colIndex] = k * b[bRow*bCols + bCol];
                }
            }
        }

-
    programName: transposeMatrixKernel
    programBody: |
        __kernel void transposeMatrixKernelCF(__global const float2 *a,
                                            const int dim,
                                            __global float2 *C) {
            int iCol = get_global_id(0);
            int iRow = get_global_id(1);
            C[iRow*dim + iCol] = a[iCol*dim + iRow];
        }

-
    programName: powerMatrixKernel
    programBody: |
        __kernel void powerMatrixKernelCF(__global const float2 *a,
                                        const int dim,
                                        const float2 power,
                                        __global float2 *C) {
            int iCol = get_global_id(0);
            int iRow = get_global_id(1);
            C[iRow*dim + iCol] = pow(a[iRow*dim + iCol], power);
        }

-
    programName: trackMatrixKernel
    programBody: |
        __kernel void trackMatrixKernelCF(__global const float2 *a,
                                        const int dim,
                                        const int groupSize,
                                        __global float2 *C) {
            int group = get_global_id(0);
            float2 sum = (0.0, 0.0);
            for(int i = group; i < dim; i += groupSize) {
                sum.x += a[i*dim + i].x;
                sum.y += a[i*dim + i].y;
            }
            C[group] = sum;
        }

-
    programName: detTriangleMatrixKernel
    programBody: |
        __kernel void detTriangleMatrixKernelCF(__global const float2 *a,
                                              const int dim,
                                              const int groupSize,
                                              __global float2 *C) {
            int group = get_global_id(0);
            float re = 1, im = 0;
            for(int i = group; i < dim; i += groupSize) {
            	float tempRe = re*a[i*dim + i].x - im*a[i*dim + i].y;  
            	float tempIm = re*a[i*dim + i].y + im*a[i*dim + i].x;
            	re = tempRe;
            	im = tempIm;  
            }
            C[group] = (float2)(re, im);
        }

-
    programName: detReduceMatrixKernel
    programBody: |
        inline float2 cmul(float2 a, float2 b){
            return (float2)( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
        }
        inline float2 cdiv(float2 a, float2 b){
            return (float2)((a.x*b.x + a.y*b.y)/(b.x*b.x + b.y*b.y), (a.y*b.x - a.x*b.y)/(b.x*b.x + b.y*b.y));
        }
        __kernel void detReduceMatrixKernelCF(__global float2 *a,
                                            const int dim,
                                            const int from) {
            __global float2 *line = a + dim * from;
            int group = get_global_id(0) + from + 1;
            float2 k = cdiv(a[group * dim + from], line[from]);
            for(int i = 0; i < dim; i++) {
                float2 temp = cmul(k, line[i]);
                a[group * dim + i].x -= temp.x;
                a[group * dim + i].y -= temp.y;
            }
        }

-
    programName: invDivide1MatrixKernel
    programBody: |
        inline float2 cmul(float2 a, float2 b){
            return (float2)( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
        }
        inline float2 cdiv(float2 a, float2 b){
            return (float2)((a.x*b.x + a.y*b.y)/(b.x*b.x + b.y*b.y), (a.y*b.x - a.x*b.y)/(b.x*b.x + b.y*b.y));
        }
        __kernel void invDivide1MatrixKernelCF(__global float2 *current,
                                             __global float2 *identity,
                                             const int dim,
                                             const int line) {
            int cell = get_global_id(0);
            float2 k = cdiv((float2)(1.0, 0.0), current[line * dim + line]);
            if (cell != line) {
                current[line * dim + cell] = cmul(current[line * dim + cell], k);
                identity[line * dim + cell] = cmul(identity[line * dim + cell], k);
            }
        }

-
    programName: invDivide2MatrixKernel
    programBody: |
        inline float2 cmul(float2 a, float2 b){
            return (float2)( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
        }
        inline float2 cdiv(float2 a, float2 b){
            return (float2)((a.x*b.x + a.y*b.y)/(b.x*b.x + b.y*b.y), (a.y*b.x - a.x*b.y)/(b.x*b.x + b.y*b.y));
        }
        __kernel void invDivide2MatrixKernelCF(__global float2 *current,
                                             __global float2 *identity,
                                             const int dim,
                                             const int cell) {
            float2 k = cdiv(1, current[cell * dim + cell]);
            current[cell * dim + cell] = (1.0, 0.0);
            identity[cell * dim + cell] = cmul(identity[cell * dim + cell], k);
        }

-
    programName: invSubtractMatrixKernel
    programBody: |
        inline float2 cmul(float2 a, float2 b){
            return (float2)( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
        }
        __kernel void invSubtractMatrixKernelCF(__global float2 *current,
                                              __global float2 *identity,
                                              const int dim,
                                              const int cell) {
            int row = get_global_id(0);
            int col = get_global_id(1);
            if (row != cell) {
                float2 k = current[row * dim + cell];
                float2 temp = cmul(k, current[cell * dim + col]);
                current[row * dim + col].x -= temp.x;
                current[row * dim + col].y -= temp.y;
                temp = cmul(k, identity[cell * dim + col]);
                identity[row * dim + col].x -= temp.x;
                identity[row * dim + col].y -= temp.y;
            }
        }
